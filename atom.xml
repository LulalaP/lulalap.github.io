<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>未知的世界</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lulalap.com/"/>
  <updated>2018-11-12T18:14:53.719Z</updated>
  <id>http://lulalap.com/</id>
  
  <author>
    <name>Philo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PAT B1015 福尔摩斯的约会(C++)</title>
    <link href="http://lulalap.com/2018/11/12/PAT-B1015-cpp/"/>
    <id>http://lulalap.com/2018/11/12/PAT-B1015-cpp/</id>
    <published>2018-11-12T15:58:53.000Z</published>
    <updated>2018-11-12T18:14:53.719Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/"> PAT 甲级目录</a>  |  <a href="http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/"> PAT 乙级目录</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。”</p><p>现给出一批考生的德才分数，请根据司马光的理论给出录取排名。<br><a id="more"></a></p><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入第一行给出 3 个正整数，分别为：$N( \leq 10^5)$ ，即考生总数；，$L(\geq 60)$ 为录取最低分数线，即德分和才分均不低于 $L$ 的考生才有资格被考虑录取；$H(&lt;100)$ ，为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于 $H$，但是德分不低于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线 $L$ 的考生也按总分排序，但排在第三类考生之后。</p><p>随后 $N$ 行，每行给出一位考生的信息，包括：<code>准考证号 德分 才分</code>，其中<code>准考证号</code>为 8 位整数，德才分为区间 [0, 100] 内的整数。数字间以空格分隔。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>输出第一行首先给出达到最低分数线的考生人数 $M$，随后 $M$ 行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">14 60 80</span><br><span class="line">10000001 64 90</span><br><span class="line">10000002 90 60</span><br><span class="line">10000011 85 80</span><br><span class="line">10000003 85 80</span><br><span class="line">10000004 80 85</span><br><span class="line">10000005 82 77</span><br><span class="line">10000006 83 76</span><br><span class="line">10000007 90 78</span><br><span class="line">10000008 75 79</span><br><span class="line">10000009 59 90</span><br><span class="line">10000010 88 45</span><br><span class="line">10000012 80 100</span><br><span class="line">10000013 90 99</span><br><span class="line">10000014 66 60</span><br></pre></td></tr></table></figure></p><p></p><h4 id="-">输出样例：</h4><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">12</span><br><span class="line">10000013 90 99</span><br><span class="line">10000012 80 100</span><br><span class="line">10000003 85 80</span><br><span class="line">10000011 85 80</span><br><span class="line">10000004 80 85</span><br><span class="line">10000007 90 78</span><br><span class="line">10000006 83 76</span><br><span class="line">10000005 82 77</span><br><span class="line">10000002 90 60</span><br><span class="line">10000014 66 60</span><br><span class="line">10000008 75 79</span><br><span class="line">10000001 64 90</span><br></pre></td></tr></table></figure><p></p><h4 id="易错点："><a href="#易错点：" class="headerlink" title="易错点："></a>易错点：</h4><ul><li>注意范围：星期是大写的 A-G；小时是从 0-9，A-N；</li><li>输出的小时和分钟，不满两位要补前导零</li></ul><h4 id="也许陌生的知识点"><a href="#也许陌生的知识点" class="headerlink" title="也许陌生的知识点"></a>也许陌生的知识点</h4><ul><li>头文件 <strong>cctype</strong> 中的某些函数<ul><li><code>isdigit(temp)</code><ul><li>判断该字符是否为数字，如是返回 true</li></ul></li><li><code>isalpha(temp)</code><ul><li>判断该字符是否为字母，如是返回 true</li></ul></li><li><code>isupper(temp)</code><ul><li>判断字符是否为大写</li></ul></li><li><code>islower(temp)</code><ul><li>判断字符是否为小写</li></ul></li></ul></li></ul><h4 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">string</span> str[<span class="number">4</span>];</span><br><span class="line">  <span class="built_in">string</span> DAY[] = &#123;<span class="string">"MON"</span>, <span class="string">"TUE"</span>, <span class="string">"WED"</span>, <span class="string">"THU"</span>, <span class="string">"FRI"</span>, <span class="string">"SAT"</span>, <span class="string">"SUN"</span>&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">    getline(<span class="built_in">cin</span>, str[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, cnt = <span class="number">0</span>; i &lt; str[<span class="number">0</span>].length() &amp;&amp; i &lt; str[<span class="number">1</span>].length(); i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(str[<span class="number">0</span>][i] == str[<span class="number">1</span>][i])&#123;</span><br><span class="line">      <span class="keyword">char</span> temp = str[<span class="number">0</span>][i];</span><br><span class="line">      <span class="keyword">if</span>(cnt == <span class="number">0</span> &amp;&amp; temp &gt;= <span class="string">'A'</span> &amp;&amp; temp &lt;= <span class="string">'G'</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; DAY[(str[<span class="number">0</span>][i] - <span class="string">'A'</span>)] &lt;&lt; <span class="string">' '</span>; <span class="comment">//星期</span></span><br><span class="line">        cnt++;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cnt == <span class="number">1</span>)&#123; <span class="comment">//小时</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isdigit</span>(temp))&#123;</span><br><span class="line">          <span class="built_in">cout</span> &lt;&lt; <span class="string">'0'</span> &lt;&lt; (<span class="keyword">int</span>)(temp - <span class="string">'0'</span>); <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">'A'</span> &lt;= temp &amp;&amp; temp &lt;= <span class="string">'N'</span> )&#123;</span><br><span class="line">          <span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span>)(temp - <span class="string">'A'</span> + <span class="number">10</span>); <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str[<span class="number">2</span>].length() &amp;&amp; i &lt; str[<span class="number">3</span>].length(); i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(str[<span class="number">2</span>][i] == str[<span class="number">3</span>][i] &amp;&amp; <span class="built_in">isalpha</span>(str[<span class="number">2</span>][i]))&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">":%02d\n"</span>, i);<span class="comment">//分钟</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/&quot;&gt; PAT 甲级目录&lt;/a&gt;  |  &lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/&quot;&gt; PAT 乙级目录&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。”&lt;/p&gt;
&lt;p&gt;现给出一批考生的德才分数，请根据司马光的理论给出录取排名。&lt;br&gt;
    
    </summary>
    
      <category term="PAT题解" scheme="http://lulalap.com/categories/PAT%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="PAT" scheme="http://lulalap.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT B1014 福尔摩斯的约会(C++)</title>
    <link href="http://lulalap.com/2018/11/12/PAT-B1014-cpp/"/>
    <id>http://lulalap.com/2018/11/12/PAT-B1014-cpp/</id>
    <published>2018-11-12T15:58:48.000Z</published>
    <updated>2018-11-12T17:37:16.617Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/"> PAT 甲级目录</a>  |  <a href="http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/"> PAT 乙级目录</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>大侦探福尔摩斯接到一张奇怪的字条：<code>我们约会吧！ 3485djDkxh4hhGE 2984akDfkkkkggEdsb s&amp;hgsfdk d&amp;Hyscvnm</code>。大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间<code>星期四 14:04</code>，因为前面两字符串中第 1 对相同的大写英文字母（大小写有区分）是第 4 个字母 <code>D</code>，代表星期四；第 2 对相同的字符是 <code>E</code> ，那是第 5 个英文字母，代表一天里的第 14 个钟头（于是一天的 0 点到 23 点由数字 0 到 9、以及大写字母 <code>A</code> 到 <code>N</code> 表示）；后面两字符串第 1 对相同的英文字母 <code>s</code> 出现在第 4 个位置（从 0 开始计数）上，代表第 4 分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。</p><br><a id="more"></a><br><br>#### 输入格式：<br>输入在 4 行中分别给出 4 个非空、不包含空格、且长度不超过 60 的字符串。<br><br>#### 输出格式：<br><p>在一行中输出约会的时间，格式为 <code>DAY HH:MM</code>，其中 <code>DAY</code> 是某星期的 3 字符缩写，即 <code>MON</code> 表示星期一，<code>TUE</code> 表示星期二，<code>WED</code> 表示星期三，<code>THU</code> 表示星期四，<code>FRI</code> 表示星期五，<code>SAT</code> 表示星期六，<code>SUN</code> 表示星期日。题目输入保证每个测试存在唯一解。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3485djDkxh4hhGE</span><br><span class="line">2984akDfkkkkggEdsb</span><br><span class="line">s&amp;hgsfdk</span><br><span class="line">d&amp;Hyscvnm</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">THU 14:04</span><br></pre></td></tr></table></figure><h4 id="易错点："><a href="#易错点：" class="headerlink" title="易错点："></a>易错点：</h4><ul><li>注意范围：星期是大写的 A-G；小时是从 0-9，A-N；</li><li>输出的小时和分钟，不满两位要补前导零</li></ul><h4 id="也许陌生的知识点"><a href="#也许陌生的知识点" class="headerlink" title="也许陌生的知识点"></a>也许陌生的知识点</h4><ul><li>头文件 <strong>cctype</strong> 中的某些函数<ul><li><code>isdigit(temp)</code><ul><li>判断该字符是否为数字，如是返回 true</li></ul></li><li><code>isalpha(temp)</code><ul><li>判断该字符是否为字母，如是返回 true</li></ul></li><li><code>isupper(temp)</code><ul><li>判断字符是否为大写</li></ul></li><li><code>islower(temp)</code><ul><li>判断字符是否为小写</li></ul></li></ul></li></ul><h4 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">string</span> str[<span class="number">4</span>];</span><br><span class="line">  <span class="built_in">string</span> DAY[] = &#123;<span class="string">"MON"</span>, <span class="string">"TUE"</span>, <span class="string">"WED"</span>, <span class="string">"THU"</span>, <span class="string">"FRI"</span>, <span class="string">"SAT"</span>, <span class="string">"SUN"</span>&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)&#123;</span><br><span class="line">    getline(<span class="built_in">cin</span>, str[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, cnt = <span class="number">0</span>; i &lt; str[<span class="number">0</span>].length() &amp;&amp; i &lt; str[<span class="number">1</span>].length(); i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(str[<span class="number">0</span>][i] == str[<span class="number">1</span>][i])&#123;</span><br><span class="line">      <span class="keyword">char</span> temp = str[<span class="number">0</span>][i];</span><br><span class="line">      <span class="keyword">if</span>(cnt == <span class="number">0</span> &amp;&amp; temp &gt;= <span class="string">'A'</span> &amp;&amp; temp &lt;= <span class="string">'G'</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; DAY[(str[<span class="number">0</span>][i] - <span class="string">'A'</span>)] &lt;&lt; <span class="string">' '</span>; <span class="comment">//星期</span></span><br><span class="line">        cnt++;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cnt == <span class="number">1</span>)&#123; <span class="comment">//小时</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isdigit</span>(temp))&#123;</span><br><span class="line">          <span class="built_in">cout</span> &lt;&lt; <span class="string">'0'</span> &lt;&lt; (<span class="keyword">int</span>)(temp - <span class="string">'0'</span>); <span class="keyword">break</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">'A'</span> &lt;= temp &amp;&amp; temp &lt;= <span class="string">'N'</span> )&#123;</span><br><span class="line">          <span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span>)(temp - <span class="string">'A'</span> + <span class="number">10</span>); <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str[<span class="number">2</span>].length() &amp;&amp; i &lt; str[<span class="number">3</span>].length(); i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(str[<span class="number">2</span>][i] == str[<span class="number">3</span>][i] &amp;&amp; <span class="built_in">isalpha</span>(str[<span class="number">2</span>][i]))&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">":%02d\n"</span>, i);<span class="comment">//分钟</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/&quot;&gt; PAT 甲级目录&lt;/a&gt;  |  &lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/&quot;&gt; PAT 乙级目录&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;大侦探福尔摩斯接到一张奇怪的字条：&lt;code&gt;我们约会吧！ 3485djDkxh4hhGE 2984akDfkkkkggEdsb s&amp;amp;hgsfdk d&amp;amp;Hyscvnm&lt;/code&gt;。大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间&lt;code&gt;星期四 14:04&lt;/code&gt;，因为前面两字符串中第 1 对相同的大写英文字母（大小写有区分）是第 4 个字母 &lt;code&gt;D&lt;/code&gt;，代表星期四；第 2 对相同的字符是 &lt;code&gt;E&lt;/code&gt; ，那是第 5 个英文字母，代表一天里的第 14 个钟头（于是一天的 0 点到 23 点由数字 0 到 9、以及大写字母 &lt;code&gt;A&lt;/code&gt; 到 &lt;code&gt;N&lt;/code&gt; 表示）；后面两字符串第 1 对相同的英文字母 &lt;code&gt;s&lt;/code&gt; 出现在第 4 个位置（从 0 开始计数）上，代表第 4 分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="PAT题解" scheme="http://lulalap.com/categories/PAT%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="PAT" scheme="http://lulalap.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT B1013 数素数(C++)</title>
    <link href="http://lulalap.com/2018/11/12/PAT-B1013-cpp/"/>
    <id>http://lulalap.com/2018/11/12/PAT-B1013-cpp/</id>
    <published>2018-11-12T15:58:42.000Z</published>
    <updated>2018-11-12T17:07:05.764Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/"> PAT 甲级目录</a>  |  <a href="http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/"> PAT 乙级目录</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>令 $P_i$ 表示第 $i$ 个素数。现任给两个正整数 $M \leq N \leq 10^4$ ，请输出 $P_M$ 到 $P_N$ 的所有素数。<br><a id="more"></a></p><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入在一行中给出 $M$ 和 $N$，其间以空格分隔。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>输出从 $P_M$ 到 $P_N$ 的所有素数，每 10 个数字占 1 行，其间以空格分隔，但行末不得有多余空格。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 27</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">11 13 17 19 23 29 31 37 41 43</span><br><span class="line">47 53 59 61 67 71 73 79 83 89</span><br><span class="line">97 101 103</span><br></pre></td></tr></table></figure><h4 id="易错点："><a href="#易错点：" class="headerlink" title="易错点："></a>易错点：</h4><ul><li>注意输出格式</li><li>1 不是素数，2是最小的素数</li></ul><h4 id="也许陌生的知识点"><a href="#也许陌生的知识点" class="headerlink" title="也许陌生的知识点"></a>也许陌生的知识点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool isprime(int x)&#123;</span><br><span class="line">  for(int i = 2; i * i &lt;= x; i++)&#123;</span><br><span class="line">    if(x % i == 0) return false;</span><br><span class="line">  &#125;</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>判断素数最好用的模板，记住就好</li></ul><h4 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= x; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> M, N;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; M &gt;&gt; N;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>, cnt = <span class="number">0</span>;  cnt &lt; N; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(isprime(i) == <span class="literal">true</span>)&#123;</span><br><span class="line">      cnt++;</span><br><span class="line">      <span class="keyword">if</span>(cnt &gt;= M &amp;&amp; cnt &lt;= N)&#123;</span><br><span class="line">        <span class="keyword">if</span>((cnt - M) % <span class="number">10</span> != <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cnt &gt; M) <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/&quot;&gt; PAT 甲级目录&lt;/a&gt;  |  &lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/&quot;&gt; PAT 乙级目录&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;令 $P_i$ 表示第 $i$ 个素数。现任给两个正整数 $M \leq N \leq 10^4$ ，请输出 $P_M$ 到 $P_N$ 的所有素数。&lt;br&gt;
    
    </summary>
    
      <category term="PAT题解" scheme="http://lulalap.com/categories/PAT%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="PAT" scheme="http://lulalap.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT B1012 数字分类(C++)</title>
    <link href="http://lulalap.com/2018/11/12/PAT-B1012-cpp/"/>
    <id>http://lulalap.com/2018/11/12/PAT-B1012-cpp/</id>
    <published>2018-11-12T15:58:36.000Z</published>
    <updated>2018-11-12T17:00:31.611Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/"> PAT 甲级目录</a>  |  <a href="http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/"> PAT 乙级目录</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：<br><a id="more"></a></p><ul><li>$A_1 = $ 能被 5 整除的数字中所有偶数的和；</li><li>$A_2 = $ 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 $n_1 - n_2 + n_3 - n_4 \cdots$ ；</li><li>$A_3 = $ 被 5 除后余 2 的数字的个数；</li><li>$A_4 = $ 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；</li><li>$A_5 = $ 被 5 除后余 4 的数字中最大数字。</li></ul><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 $N$，随后给出 $N$ 个不超过 1000 的待分类的正整数。数字间以空格分隔。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>对给定的 $N$ 个正整数，按题目要求计算 $A_1$ ~ $A_5$ 并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。若其中某一类数字不存在，则在相应位置输出 <code>N</code>。</p><h4 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13 1 2 3 4 5 6 7 8 9 10 20 16 18</span><br></pre></td></tr></table></figure><h4 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 11 2 9.7 9</span><br></pre></td></tr></table></figure><h4 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8 1 2 4 5 6 7 9 16</span><br></pre></td></tr></table></figure><h4 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">N 11 2 N 9</span><br></pre></td></tr></table></figure><h4 id="易错点："><a href="#易错点：" class="headerlink" title="易错点："></a>易错点：</h4><ul><li>就，仔细看题</li></ul><h4 id="也许陌生的知识点"><a href="#也许陌生的知识点" class="headerlink" title="也许陌生的知识点"></a>也许陌生的知识点</h4><ul><li><code>y = (y &lt; x ? x : y);</code><ul><li>从两者中取较大值的简便表达式</li></ul></li></ul><h4 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> N, x, A[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;, cnt[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;, fac = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">    <span class="keyword">if</span>(x % <span class="number">5</span> == <span class="number">0</span> &amp;&amp; x % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">      A[<span class="number">0</span>] += x;</span><br><span class="line">      cnt[<span class="number">0</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x % <span class="number">5</span> != <span class="number">0</span>)&#123;</span><br><span class="line">      cnt[x % <span class="number">5</span>]++; <span class="comment">// 计数</span></span><br><span class="line">      <span class="keyword">if</span>(x % <span class="number">5</span> == <span class="number">1</span>)&#123; <span class="comment">//交错相加</span></span><br><span class="line">        A[<span class="number">1</span>] = A[<span class="number">1</span>] + fac * x;</span><br><span class="line">        fac = -fac;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(x % <span class="number">5</span> == <span class="number">2</span>)&#123;</span><br><span class="line">        A[<span class="number">2</span>]++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(x % <span class="number">5</span> == <span class="number">3</span>)&#123;</span><br><span class="line">        A[<span class="number">3</span>] += x;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(x % <span class="number">5</span> == <span class="number">4</span>)&#123; <span class="comment">//取最大值</span></span><br><span class="line">        A[<span class="number">4</span>] = (A[<span class="number">4</span>] &lt; x ? x : A[<span class="number">4</span>]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">    <span class="keyword">if</span>(cnt[i] == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"N"</span>); <span class="comment">//数字不存在</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(i == <span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">"%.1f"</span>, <span class="number">1.0</span> * A[<span class="number">3</span>] / cnt[<span class="number">3</span>]);</span><br><span class="line">      <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d"</span>, A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/&quot;&gt; PAT 甲级目录&lt;/a&gt;  |  &lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/&quot;&gt; PAT 乙级目录&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：&lt;br&gt;
    
    </summary>
    
      <category term="PAT题解" scheme="http://lulalap.com/categories/PAT%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="PAT" scheme="http://lulalap.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT B1011 A+B和C(C++)</title>
    <link href="http://lulalap.com/2018/11/12/PAT-B1011-cpp/"/>
    <id>http://lulalap.com/2018/11/12/PAT-B1011-cpp/</id>
    <published>2018-11-12T15:58:27.000Z</published>
    <updated>2018-11-12T16:41:33.606Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/"> PAT 甲级目录</a>  |  <a href="http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/"> PAT 乙级目录</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定区间 $[-2^{31}, 2^{31}]$ 内的 3 个整数 $A$ 、$B$ 和 $C$，请判断 $A+B$ 是否大于 $C$。<br><a id="more"></a></p><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入第 1 行给出正整数 $T(\leq10)$ ，是测试用例的个数。随后给出 T 组测试用例，每组占一行，顺序给出 $A$ 、$B$ 和 $C$。整数间以空格分隔。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>对每组测试用例，在一行中输出 <code>Case #X: true</code> 如果 $A+B&gt;C$，否则输出 <code>Case #X: false</code>，其中 <code>X</code> 是测试用例的编号（从 1 开始）。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 2 3</span><br><span class="line">2 3 4</span><br><span class="line">2147483647 0 2147483646</span><br><span class="line">0 -2147483648 -2147483647</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Case #1: false</span><br><span class="line">Case #2: true</span><br><span class="line">Case #3: true</span><br><span class="line">Case #4: false</span><br></pre></td></tr></table></figure><h4 id="易错点："><a href="#易错点：" class="headerlink" title="易错点："></a>易错点：</h4><ul><li>不是大整数，不用想太复杂，直接上 long int</li></ul><h4 id="也许陌生的知识点"><a href="#也许陌生的知识点" class="headerlink" title="也许陌生的知识点"></a>也许陌生的知识点</h4><ul><li>64 位系统，int 占 4 个字节，范围是 $[-2^{31}, 2^{31} - 1]$</li><li>64 位系统，long int 占 8 个字节，范围是 $[-2^{63}, 2^{63} - 1]$</li></ul><h4 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">int</span> A, B, C, N;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; A &gt;&gt; B &gt;&gt; C;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; i &lt;&lt; (A + B &gt; C ? <span class="string">": true"</span> : <span class="string">": false"</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/&quot;&gt; PAT 甲级目录&lt;/a&gt;  |  &lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/&quot;&gt; PAT 乙级目录&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;给定区间 $[-2^{31}, 2^{31}]$ 内的 3 个整数 $A$ 、$B$ 和 $C$，请判断 $A+B$ 是否大于 $C$。&lt;br&gt;
    
    </summary>
    
      <category term="PAT题解" scheme="http://lulalap.com/categories/PAT%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="PAT" scheme="http://lulalap.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT B1010 一元多项式求导(C++)</title>
    <link href="http://lulalap.com/2018/11/12/PAT-B1010-cpp/"/>
    <id>http://lulalap.com/2018/11/12/PAT-B1010-cpp/</id>
    <published>2018-11-12T15:58:20.000Z</published>
    <updated>2018-11-12T16:28:24.719Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/"> PAT 甲级目录</a>  |  <a href="http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/"> PAT 乙级目录</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>设计函数求一元多项式的导数。（注：$x^n$（ $n$ 为整数）的一阶导数为 $nx^{n-1}$ 。）<br><a id="more"></a></p><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 <code>0</code>，但是表示为 <code>0 0</code>。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 4 -5 2 6 1 -2 0</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12 3 -10 1 6 0</span><br></pre></td></tr></table></figure><h4 id="易错点："><a href="#易错点：" class="headerlink" title="易错点："></a>易错点：</h4><ul><li>结果为 0 的时候要另外判断，输出 <code>0 0</code></li></ul><h4 id="也许陌生的知识点"><a href="#也许陌生的知识点" class="headerlink" title="也许陌生的知识点"></a>也许陌生的知识点</h4><ul><li><code>while(scanf(&quot;%d %d&quot;, &amp;a, &amp;b) != EOF){ }</code><ul><li>可用于判断输入是否结束，自己测试运行时可用 <code>ctrl + z</code> 作为输入结束，程序可识别</li></ul></li></ul><h4 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> a, b, S[<span class="number">1010</span>][<span class="number">2</span>], cnt = <span class="number">0</span>, print = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b) != EOF)&#123; <span class="comment">// 输入结束判断</span></span><br><span class="line">    S[cnt][<span class="number">0</span>] = a * b;</span><br><span class="line">    S[cnt][<span class="number">1</span>] = b - <span class="number">1</span>;</span><br><span class="line">    cnt ++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(S[i][<span class="number">1</span>] &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(i != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"%d %d"</span>, S[i][<span class="number">0</span>], S[i][<span class="number">1</span>]);</span><br><span class="line">      print++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(print == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"0 0"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/&quot;&gt; PAT 甲级目录&lt;/a&gt;  |  &lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/&quot;&gt; PAT 乙级目录&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;设计函数求一元多项式的导数。（注：$x^n$（ $n$ 为整数）的一阶导数为 $nx^{n-1}$ 。）&lt;br&gt;
    
    </summary>
    
      <category term="PAT题解" scheme="http://lulalap.com/categories/PAT%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="PAT" scheme="http://lulalap.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT B1009 说反话(C++)</title>
    <link href="http://lulalap.com/2018/11/12/PAT-B1009-cpp/"/>
    <id>http://lulalap.com/2018/11/12/PAT-B1009-cpp/</id>
    <published>2018-11-12T15:58:14.000Z</published>
    <updated>2018-11-12T16:55:41.108Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/"> PAT 甲级目录</a>  |  <a href="http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/"> PAT 乙级目录</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。<br><a id="more"></a></p><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>每个测试用例的输出占一行，输出倒序后的句子。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World Here I Come</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Come I Here World Hello</span><br></pre></td></tr></table></figure><h4 id="易错点："><a href="#易错点：" class="headerlink" title="易错点："></a>易错点：</h4><ul><li>注意输出格式，末尾没有空格</li></ul><h4 id="也许陌生的知识点"><a href="#也许陌生的知识点" class="headerlink" title="也许陌生的知识点"></a>也许陌生的知识点</h4><ul><li><code>vector&lt;int&gt; ans;</code><ul><li>实现变长数组，元素类型可任意指定<ul><li><code>ans.push_back(num[i])</code>往变长数组末尾中添加一个元素</li><li><code>ans.pop_back()</code>删除变长数组中最后一个元素</li></ul></li><li>需要的头文件：<strong>vector</strong></li></ul></li><li><code>getline(cin, str);</code><ul><li>输入一整行的字符串，包括空格等</li></ul></li></ul><h4 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h4><ul><li><p>方法一（C语言）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">81</span>][<span class="number">81</span>];</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str[cnt]) != EOF)&#123;</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = cnt - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>, str[i]);</span><br><span class="line">        <span class="keyword">if</span>(i &gt; <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法二</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">string</span> str;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans;</span><br><span class="line">  getline(<span class="built_in">cin</span>, str);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length();i++)&#123;</span><br><span class="line">    <span class="built_in">string</span> temp;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; str.length() &amp;&amp; str[i] != <span class="string">' '</span>) temp += str[i++];</span><br><span class="line">    ans.push_back(temp);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = ans.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans[i];</span><br><span class="line">    <span class="keyword">if</span>(i != <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/&quot;&gt; PAT 甲级目录&lt;/a&gt;  |  &lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/&quot;&gt; PAT 乙级目录&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。&lt;br&gt;
    
    </summary>
    
      <category term="PAT题解" scheme="http://lulalap.com/categories/PAT%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="PAT" scheme="http://lulalap.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT B1008 数组元素循环右移问题(C++)</title>
    <link href="http://lulalap.com/2018/11/12/PAT-B1008-cpp/"/>
    <id>http://lulalap.com/2018/11/12/PAT-B1008-cpp/</id>
    <published>2018-11-12T15:57:18.000Z</published>
    <updated>2018-11-12T18:23:14.093Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/"> PAT 甲级目录</a>  |  <a href="http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/"> PAT 乙级目录</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>一个数组 $A$ 中存有 $N(&gt;0)$ 个整数，在不允许使用另外数组的前提下，将每个整数循环向右移$M( \leq 0)$ 个位置，即将 $A$ 中的数据由 $A_0 A_1  … A_{N-1}$ 变换为 $A_{N-M} … A_{N-1} A_0 A_1 … A_{N-M-1}$ （最后 $M$ 个数循环移至最前面的 $M$ 个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？<br><a id="more"></a></p><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>每个输入包含一个测试用例，第 1 行输入 $N(1 \le N \le 100)$ 和 $M( \ge 0)$ ；第 2 行输入 $N$ 个整数，之间用空格分隔。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>在一行中输出循环右移 $M$ 位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6 2</span><br><span class="line">1 2 3 4 5 6</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 6 1 2 3 4</span><br></pre></td></tr></table></figure><h4 id="易错点："><a href="#易错点：" class="headerlink" title="易错点："></a>易错点：</h4><ul><li>当 $M$ 大于 $N$ 时，只要对 $M$ 取余结果是一样的 ：<code>M = M % N</code>;</li><li>数组原地平移，可以用分别逆转不同区域的数组，最后全部逆转</li></ul><h4 id="也许陌生的知识点"><a href="#也许陌生的知识点" class="headerlink" title="也许陌生的知识点"></a>也许陌生的知识点</h4><ul><li><code>reverse(num, num + N);</code><ul><li>对数组 [first, last) 范围内的元素逆转</li><li>需要头文件：<strong>algorithm</strong></li></ul></li></ul><h4 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> N, M, num[<span class="number">110</span>];</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M;</span><br><span class="line">  M = M % N;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num[i];</span><br><span class="line">  &#125;</span><br><span class="line">  reverse(num, num + N - M);</span><br><span class="line">  reverse(num + N - M, num + N);</span><br><span class="line">  reverse(num, num + N);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; num[i];</span><br><span class="line">    <span class="keyword">if</span>(i != N - <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/&quot;&gt; PAT 甲级目录&lt;/a&gt;  |  &lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/&quot;&gt; PAT 乙级目录&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;一个数组 $A$ 中存有 $N(&amp;gt;0)$ 个整数，在不允许使用另外数组的前提下，将每个整数循环向右移$M( \leq 0)$ 个位置，即将 $A$ 中的数据由 $A_0 A_1  … A_{N-1}$ 变换为 $A_{N-M} … A_{N-1} A_0 A_1 … A_{N-M-1}$ （最后 $M$ 个数循环移至最前面的 $M$ 个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？&lt;br&gt;
    
    </summary>
    
      <category term="PAT题解" scheme="http://lulalap.com/categories/PAT%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="PAT" scheme="http://lulalap.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT B1007 素数对猜想(C++)</title>
    <link href="http://lulalap.com/2018/11/12/PAT-B1007-cpp/"/>
    <id>http://lulalap.com/2018/11/12/PAT-B1007-cpp/</id>
    <published>2018-11-12T15:43:19.000Z</published>
    <updated>2018-11-12T15:56:59.471Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/"> PAT 甲级目录</a>  |  <a href="http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/"> PAT 乙级目录</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>让我们定义 $d_n$ 为：$d_n= p_n+1-p^n$ ，其中 $p_i$ 是第 $i$ 个素数。显然有 $d_1=1$，且对于 $n&gt;1$ 有 $d_n$ 是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。</p><p>现给定任意正整数$N(&lt;10^5)$，请计算不超过N的满足猜想的素数对的个数。<br><a id="more"></a></p><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入在一行给出正整数 $N$ 。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>在一行中输出不超过 $N$ 的满足猜想的素数对的个数。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure><h4 id="易错点："><a href="#易错点：" class="headerlink" title="易错点："></a>易错点：</h4><ul><li>1 不是素数，2是最小的素数</li></ul><h4 id="也许陌生的知识点"><a href="#也许陌生的知识点" class="headerlink" title="也许陌生的知识点"></a>也许陌生的知识点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool isprime(int x)&#123;</span><br><span class="line">  for(int i = 2; i * i &lt;= x; i++)&#123;</span><br><span class="line">    if(x % i == 0) return false;</span><br><span class="line">  &#125;</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>判断素数最好用的模板，记住就好</li></ul><h4 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= x; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> N, cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N - <span class="number">2</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(isprime(i) &amp;&amp; isprime(i + <span class="number">2</span>))&#123;</span><br><span class="line">      cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/&quot;&gt; PAT 甲级目录&lt;/a&gt;  |  &lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/&quot;&gt; PAT 乙级目录&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;让我们定义 $d_n$ 为：$d_n= p_n+1-p^n$ ，其中 $p_i$ 是第 $i$ 个素数。显然有 $d_1=1$，且对于 $n&amp;gt;1$ 有 $d_n$ 是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。&lt;/p&gt;
&lt;p&gt;现给定任意正整数$N(&amp;lt;10^5)$，请计算不超过N的满足猜想的素数对的个数。&lt;br&gt;
    
    </summary>
    
      <category term="PAT题解" scheme="http://lulalap.com/categories/PAT%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="PAT" scheme="http://lulalap.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT B1006 换个格式输出整数(C++)</title>
    <link href="http://lulalap.com/2018/11/12/PAT-B1006-cpp/"/>
    <id>http://lulalap.com/2018/11/12/PAT-B1006-cpp/</id>
    <published>2018-11-12T15:33:10.000Z</published>
    <updated>2018-11-12T15:42:35.568Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/"> PAT 甲级目录</a>  |  <a href="http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/"> PAT 乙级目录</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>让我们用字母 <strong>B</strong> 来表示“百”、字母 S 表示“十”，用 <strong>12…n</strong> 来表示不为零的个位数字 n（&lt;10），换个格式来输出任一个不超过 3 位的正整数。例如 <strong>234</strong> 应该被输出为 <strong>BBSSS1234</strong>，因为它有 2 个“百”、3 个“十”、以及个位的 4。<br><a id="more"></a></p><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>每个测试输入包含 1 个测试用例，给出正整数 $n(&lt;1000)$。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>每个测试用例的输出占一行，用规定的格式输出 $n$。</p><h4 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">234</span><br></pre></td></tr></table></figure><h4 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BBSSS1234</span><br></pre></td></tr></table></figure><h4 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">23</span><br></pre></td></tr></table></figure><h4 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SS123</span><br></pre></td></tr></table></figure><h4 id="易错点："><a href="#易错点：" class="headerlink" title="易错点："></a>易错点：</h4><ul><li>为避免讨论数字位数，直接将数字补上前导零，便于处理</li></ul><h4 id="也许陌生的知识点"><a href="#也许陌生的知识点" class="headerlink" title="也许陌生的知识点"></a>也许陌生的知识点</h4><ul><li><code>num = &#39;0&#39; + num;</code><ul><li>字符串拼接</li><li>需要的头文件：<strong>string</strong></li></ul></li></ul><h4 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">string</span> num;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">  <span class="keyword">while</span>(num.length() &lt; <span class="number">3</span>) num = <span class="string">'0'</span> + num; <span class="comment">//字符串补上前导零，统一长度</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num.length(); i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> j = (<span class="keyword">int</span>)(num[i] - <span class="string">'0'</span>); <span class="comment">//类型转换成数字</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= j; k++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(i == <span class="number">2</span>) <span class="built_in">cout</span> &lt;&lt; k;</span><br><span class="line">      <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; (i == <span class="number">0</span> ? <span class="string">'B'</span> : <span class="string">'S'</span>);<span class="comment">// if(i == 0) cout &lt;&lt; 'B'; if(i == 1) cout &lt;&lt; 'S';</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/&quot;&gt; PAT 甲级目录&lt;/a&gt;  |  &lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/&quot;&gt; PAT 乙级目录&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;让我们用字母 &lt;strong&gt;B&lt;/strong&gt; 来表示“百”、字母 S 表示“十”，用 &lt;strong&gt;12…n&lt;/strong&gt; 来表示不为零的个位数字 n（&amp;lt;10），换个格式来输出任一个不超过 3 位的正整数。例如 &lt;strong&gt;234&lt;/strong&gt; 应该被输出为 &lt;strong&gt;BBSSS1234&lt;/strong&gt;，因为它有 2 个“百”、3 个“十”、以及个位的 4。&lt;br&gt;
    
    </summary>
    
      <category term="PAT题解" scheme="http://lulalap.com/categories/PAT%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="PAT" scheme="http://lulalap.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT B1005 继续(3n+1)猜想(C++)</title>
    <link href="http://lulalap.com/2018/11/12/PAT-B1005-cpp/"/>
    <id>http://lulalap.com/2018/11/12/PAT-B1005-cpp/</id>
    <published>2018-11-12T15:16:18.000Z</published>
    <updated>2018-11-12T15:32:31.115Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/"> PAT 甲级目录</a>  |  <a href="http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/"> PAT 乙级目录</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。<br><a id="more"></a></p><p>当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 $n=$ 3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 $n=$ 5、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 n 为“关键数”，如果 $n$ 不能被数列中的其他数字所覆盖。</p><p>现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</p><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 $K (&lt;100)$，第 2 行给出 $K$ 个互不相同的待验证的正整数 $n (1&lt;n \leq 100)$的值，数字间用空格隔开。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">3 5 6 7 8 11</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7 6</span><br></pre></td></tr></table></figure><h4 id="易错点："><a href="#易错点：" class="headerlink" title="易错点："></a>易错点：</h4><ul><li>注意输出格式</li></ul><h4 id="也许陌生的知识点"><a href="#也许陌生的知识点" class="headerlink" title="也许陌生的知识点"></a>也许陌生的知识点</h4><ul><li><code>map&lt;int, int&gt; m;</code><ul><li>用于映射，键和值可以是任意类型</li><li>直接使用 <code>m[&lt;键&gt;] = &lt;值&gt;</code> 即可向map中添加一组键值对</li><li>需要的头文件：<strong>map</strong></li></ul></li><li><code>vector&lt;int&gt; ans;</code><ul><li>实现变长数组，元素类型可任意指定<ul><li><code>ans.push_back(num[i])</code>往变长数组末尾中添加一个元素</li><li><code>ans.pop_back()</code>删除变长数组中最后一个元素</li></ul></li><li>需要的头文件：<strong>vector</strong></li></ul></li></ul><h4 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n, x, num[<span class="number">110</span>];</span><br><span class="line">  <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">    num[i] = x;</span><br><span class="line">    <span class="keyword">while</span>(x &gt; <span class="number">1</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(x % <span class="number">2</span> == <span class="number">0</span>) x /= <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">else</span>&#123; x = (<span class="number">3</span> * x + <span class="number">1</span>) / <span class="number">2</span>; &#125;</span><br><span class="line">      m[x] = <span class="number">1</span>; <span class="comment">//记录运算中遇到过的数字</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(m[num[i]] != <span class="number">1</span>) ans.push_back(num[i]); <span class="comment">//遍历原序列</span></span><br><span class="line">  &#125;</span><br><span class="line">  sort(ans.begin(), ans.end()); <span class="comment">// 不加参数的sort函数默认从小到大排序</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = ans.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123; <span class="comment">//倒序输出</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans[i];</span><br><span class="line">    <span class="keyword">if</span>(i != <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/&quot;&gt; PAT 甲级目录&lt;/a&gt;  |  &lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/&quot;&gt; PAT 乙级目录&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。&lt;br&gt;
    
    </summary>
    
      <category term="PAT题解" scheme="http://lulalap.com/categories/PAT%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="PAT" scheme="http://lulalap.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT B1004 成绩排名(C++)</title>
    <link href="http://lulalap.com/2018/11/12/PAT-B1004-cpp/"/>
    <id>http://lulalap.com/2018/11/12/PAT-B1004-cpp/</id>
    <published>2018-11-12T04:25:03.000Z</published>
    <updated>2018-11-12T15:31:12.250Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/"> PAT 甲级目录</a>  |  <a href="http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/"> PAT 乙级目录</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>读入 $n(&gt;0)$名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。<br><a id="more"></a></p><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>每个测试输入包含 1 个测试用例，格式为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第 1 行：正整数 n</span><br><span class="line">第 2 行：第 1 个学生的姓名 学号 成绩</span><br><span class="line">第 3 行：第 2 个学生的姓名 学号 成绩</span><br><span class="line">  ... ... ...</span><br><span class="line">第 n+1 行：第 n 个学生的姓名 学号 成绩</span><br></pre></td></tr></table></figure></p><p>其中 <strong>姓名</strong> 和 <strong>学号</strong> 均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mike CS991301</span><br><span class="line">Joe Math990112</span><br></pre></td></tr></table></figure><h4 id="易错点："><a href="#易错点：" class="headerlink" title="易错点："></a>易错点：</h4><ul><li>实际上正确的字符串等价于: (‘P’左边’A’的个数) * (中间’A’的个数) = ‘T’右边’A’的个数</li><li>中间’A’的个数不少于一个</li><li>‘P’和’T’分别只能出现一次</li></ul><h4 id="也许陌生的知识点"><a href="#也许陌生的知识点" class="headerlink" title="也许陌生的知识点"></a>也许陌生的知识点</h4><ul><li><code>stu(){}</code><ul><li>结构体中加上这句后，可以无需声明直接定义一个新的变量</li></ul></li><li><code>stu(string _name, string _id, int _score):name(_name), id(_id), score(_score){}</code><ul><li>实现直接用指定参数定义结构体变量</li></ul></li><li><code>bool cmp(stu a, stu b){}</code><ul><li>比较函数，可以自定义 sort 时的排序策略</li><li>本题中该函数实现按关键字 score 对数组从大到小排序</li></ul></li><li><code>sort(S, S + n, cmp);</code><ul><li>排序函数，实现 [first, last) 范围内的排序，可以自定义排序策略 cmp 函数</li><li>不带 cmp 参数的 sort 函数实现从小到大排序</li><li>所需头文件： <strong>algorithm</strong></li></ul></li></ul><h4 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span>&#123;</span></span><br><span class="line">  <span class="built_in">string</span> name, id;</span><br><span class="line">  <span class="keyword">int</span> score;</span><br><span class="line">  stu()&#123;&#125;</span><br><span class="line">  stu(<span class="built_in">string</span> _name, <span class="built_in">string</span> _id, <span class="keyword">int</span> _score):name(_name), id(_id), score(_score)&#123;&#125;</span><br><span class="line">&#125;S[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(stu a, stu b)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a.score &gt; b.score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">    <span class="built_in">string</span> name, id;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; name &gt;&gt; id &gt;&gt; score;</span><br><span class="line">    S[i] = stu(name, id, score);</span><br><span class="line">  &#125;</span><br><span class="line">  sort(S, S + n, cmp);</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; S[<span class="number">0</span>].name &lt;&lt; <span class="string">' '</span> &lt;&lt; S[<span class="number">0</span>].id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; S[n - <span class="number">1</span>].name &lt;&lt; <span class="string">' '</span> &lt;&lt; S[n - <span class="number">1</span>].id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/&quot;&gt; PAT 甲级目录&lt;/a&gt;  |  &lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/&quot;&gt; PAT 乙级目录&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;读入 $n(&amp;gt;0)$名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。&lt;br&gt;
    
    </summary>
    
      <category term="PAT题解" scheme="http://lulalap.com/categories/PAT%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="PAT" scheme="http://lulalap.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT B1090 危险品装箱(C++)</title>
    <link href="http://lulalap.com/2018/11/11/PAT-B1090-cpp/"/>
    <id>http://lulalap.com/2018/11/11/PAT-B1090-cpp/</id>
    <published>2018-11-11T12:38:57.000Z</published>
    <updated>2018-11-11T13:18:47.163Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/"> PAT 甲级目录</a>  |  <a href="http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/"> PAT 乙级目录</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>集装箱运输货物时，我们必须特别小心，不能把不相容的货物装在一只箱子里。比如氧化剂绝对不能跟易燃液体同箱，否则很容易造成爆炸。</p><p>本题给定一张不相容物品的清单，需要你检查每一张集装箱货品清单，判断它们是否能装在同一只箱子里。<br><a id="more"></a></p><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入第一行给出两个正整数：$N(\le10^4)$ 是成对的不相容物品的对数；$M(\le100)$ 是集装箱货品清单的单数。</p><p>随后数据分两大块给出。第一块有 N 行，每行给出一对不相容的物品。第二块有 M 行，每行给出一箱货物的清单，格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">K G[1] G[2] ... G[K]</span><br></pre></td></tr></table></figure><p>其中 $K (\le1000)$ 是物品件数，G[i] 是物品的编号。简单起见，每件物品用一个 5 位数的编号代表。两个数字之间用空格分隔。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>对每箱货物清单，判断是否可以安全运输。如果没有不相容物品，则在一行中输出 <strong>Yes</strong>，否则输出 <strong>No</strong>。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">6 3</span><br><span class="line">20001 20002</span><br><span class="line">20003 20004</span><br><span class="line">20005 20006</span><br><span class="line">20003 20001</span><br><span class="line">20005 20004</span><br><span class="line">20004 20006</span><br><span class="line">4 00001 20004 00002 20003</span><br><span class="line">5 98823 20002 20003 20006 10010</span><br><span class="line">3 12345 67890 23333</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">No</span><br><span class="line">Yes</span><br><span class="line">Yes</span><br></pre></td></tr></table></figure><h4 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h4><ul><li>用变长数组防止超内存</li></ul><h4 id="也许陌生的知识点"><a href="#也许陌生的知识点" class="headerlink" title="也许陌生的知识点"></a>也许陌生的知识点</h4><ul><li><code>map &lt;int, int&gt; m;</code><ul><li>功能：定义了一个键和值都为 int 型的 map 型变量，存放出现过的数并记录次数<ul><li>可以通过关键词名称索引访问对应值 <code>m[key]++;</code></li></ul></li><li>需要头文件：<strong>map</strong></li></ul></li></ul><h4 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n, cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">map</span> &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> key = i / <span class="number">2</span> + i / <span class="number">3</span> + i / <span class="number">5</span>;</span><br><span class="line">    m[key]++;</span><br><span class="line">    <span class="keyword">if</span>(m[key] == <span class="number">1</span>) cnt++; <span class="comment">//对新出现的数字计数</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/&quot;&gt; PAT 甲级目录&lt;/a&gt;  |  &lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/&quot;&gt; PAT 乙级目录&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;集装箱运输货物时，我们必须特别小心，不能把不相容的货物装在一只箱子里。比如氧化剂绝对不能跟易燃液体同箱，否则很容易造成爆炸。&lt;/p&gt;
&lt;p&gt;本题给定一张不相容物品的清单，需要你检查每一张集装箱货品清单，判断它们是否能装在同一只箱子里。&lt;br&gt;
    
    </summary>
    
      <category term="PAT题解" scheme="http://lulalap.com/categories/PAT%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="PAT" scheme="http://lulalap.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT B1087 有多少不同的值(C++)</title>
    <link href="http://lulalap.com/2018/11/11/PAT-B1087-cpp/"/>
    <id>http://lulalap.com/2018/11/11/PAT-B1087-cpp/</id>
    <published>2018-11-11T12:22:43.000Z</published>
    <updated>2018-11-11T13:18:41.005Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/"> PAT 甲级目录</a>  |  <a href="http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/"> PAT 乙级目录</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>当自然数 $n$ 依次取 1、2、3、……、N 时，算式 ⌊$n/2$⌋+⌊$n/3$⌋+⌊$n/5$⌋ 有多少个不同的值？（注：⌊$x$⌋ 为取整函数，表示不超过 $x$ 的最大自然数，即 $x$ 的整数部分。）<br><a id="more"></a></p><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入给出一个正整数 $N(2 \le N \le 10^4)$。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>在一行中输出题面中算式取到的不同值的个数。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2017</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1480</span><br></pre></td></tr></table></figure><h4 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h4><ul><li>用 map 记录每个数出现的次数，键值等于1的时候说明该数第一次被记录</li><li>整数除法默认向下取整，所以不需要特殊调整</li></ul><h4 id="也许陌生的知识点"><a href="#也许陌生的知识点" class="headerlink" title="也许陌生的知识点"></a>也许陌生的知识点</h4><ul><li><code>map &lt;int, int&gt; m;</code><ul><li>功能：定义了一个键和值都为 int 型的 map 型变量，存放出现过的数并记录次数<ul><li>可以通过关键词名称索引访问对应值 <code>m[key]++;</code></li></ul></li><li>需要头文件：<strong>map</strong></li></ul></li></ul><h4 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n, cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">map</span> &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> key = i / <span class="number">2</span> + i / <span class="number">3</span> + i / <span class="number">5</span>;</span><br><span class="line">    m[key]++;</span><br><span class="line">    <span class="keyword">if</span>(m[key] == <span class="number">1</span>) cnt++; <span class="comment">//对新出现的数字计数</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; cnt;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/&quot;&gt; PAT 甲级目录&lt;/a&gt;  |  &lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/&quot;&gt; PAT 乙级目录&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;当自然数 $n$ 依次取 1、2、3、……、N 时，算式 ⌊$n/2$⌋+⌊$n/3$⌋+⌊$n/5$⌋ 有多少个不同的值？（注：⌊$x$⌋ 为取整函数，表示不超过 $x$ 的最大自然数，即 $x$ 的整数部分。）&lt;br&gt;
    
    </summary>
    
      <category term="PAT题解" scheme="http://lulalap.com/categories/PAT%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="PAT" scheme="http://lulalap.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT B1086 就不告诉你(C++)</title>
    <link href="http://lulalap.com/2018/11/11/PAT-B1086-cpp/"/>
    <id>http://lulalap.com/2018/11/11/PAT-B1086-cpp/</id>
    <published>2018-11-11T11:54:05.000Z</published>
    <updated>2018-11-11T13:18:35.012Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/"> PAT 甲级目录</a>  |  <a href="http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/"> PAT 乙级目录</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>做作业的时候，邻座的小盆友问你：“五乘以七等于多少？”你应该不失礼貌地围笑着告诉他：“五十三。”本题就要求你，对任何一对给定的正整数，倒着输出它们的乘积。<br><a id="more"></a></p><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>输入在第一行给出两个不超过 1000 的正整数 A 和 B，其间以空格分隔。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>在一行中倒着输出 A 和 B 的乘积。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 7</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">53</span><br></pre></td></tr></table></figure><h4 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h4><ul><li>逆转输出不要输出前导零</li></ul><h4 id="也许陌生的知识点"><a href="#也许陌生的知识点" class="headerlink" title="也许陌生的知识点"></a>也许陌生的知识点</h4><ul><li><code>G[x].push_back(y);</code><ul><li>功能：往变长数组加入新元素</li><li>需要头文件：<strong>vector</strong></li></ul></li><li><code>for(auto it = s.begin(); it != s.end(); it++){ 循环体; }</code><ul><li>功能：遍历一个集合，it是迭代器，*it 为迭代器指向的元素</li><li>需要头文件：<strong>set</strong></li></ul></li><li><code>s.insert(id);</code><ul><li>功能：往集合中加入元素</li><li>需要头文件：<strong>set</strong></li></ul></li></ul><h4 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100000</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> N, M;</span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">    G[x].push_back(y);</span><br><span class="line">    G[y].push_back(x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)&#123;</span><br><span class="line">    <span class="keyword">int</span> k, id, valid = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s; <span class="comment">//用一个集合暂存清单</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++)&#123;</span><br><span class="line">      <span class="built_in">cin</span> &gt;&gt; id;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">0</span>; valid == <span class="number">1</span> &amp;&amp; l &lt; G[id].size(); l++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it = s.begin(); it != s.end(); it++)&#123;<span class="comment">//寻找当前物品是否与集合中其他物品不相容</span></span><br><span class="line">          <span class="keyword">if</span>(G[id][l] == *it)&#123; <span class="comment">//存在不相容的，记录非法并退出查找</span></span><br><span class="line">            valid = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      s.insert(id); <span class="comment">//将当前物品加入集合</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(valid == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"No\n"</span>; <span class="comment">//非法</span></span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes\n"</span>;          <span class="comment">//合法</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/&quot;&gt; PAT 甲级目录&lt;/a&gt;  |  &lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/&quot;&gt; PAT 乙级目录&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;做作业的时候，邻座的小盆友问你：“五乘以七等于多少？”你应该不失礼貌地围笑着告诉他：“五十三。”本题就要求你，对任何一对给定的正整数，倒着输出它们的乘积。&lt;br&gt;
    
    </summary>
    
      <category term="PAT题解" scheme="http://lulalap.com/categories/PAT%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="PAT" scheme="http://lulalap.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT B1002 写出这个数(Python)</title>
    <link href="http://lulalap.com/2018/11/11/PAT-B1002-py/"/>
    <id>http://lulalap.com/2018/11/11/PAT-B1002-py/</id>
    <published>2018-11-11T05:06:26.000Z</published>
    <updated>2018-11-12T15:00:49.397Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/"> PAT 甲级目录</a>  |  <a href="http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/"> PAT 乙级目录</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><a id="more"></a><p>读入一个正整数 $n$，计算其各位数字之和，用汉语拼音写出和的每一位数字。</p><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>每个测试输入包含 1 个测试用例，即给出自然数 $n$ 的值。这里保证 $n$ 小于 $10^{100}$ 。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>在一行内输出 $n$ 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1234567890987654321123456789</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yi san wu</span><br></pre></td></tr></table></figure><h4 id="易错点："><a href="#易错点：" class="headerlink" title="易错点："></a>易错点：</h4><ul><li>注意输出末尾没有空格</li><li>倒序输出</li></ul><h4 id="也许陌生的知识点"><a href="#也许陌生的知识点" class="headerlink" title="也许陌生的知识点"></a>也许陌生的知识点</h4><ul><li><p><code>s = input()</code></p><ul><li>输入字符串</li></ul></li><li><p><code>y = int(x)</code></p><ul><li>将变量类型转换为整型</li></ul></li><li><p><code>y = str(x)</code></p><ul><li>将变量类型转换为字符串型</li></ul></li><li><p><code>for i, t in enumerate(ans):</code></p><ul><li>同时遍历字符串中的字符以及字符的索引</li></ul></li><li><p><code>print(&#39; &#39; if i &gt; 0 else &#39;&#39;, li[int(t)], sep = &#39;&#39;, end = &#39;&#39;)</code></p><ul><li><p>索引判断令其在中间添加空格</p></li><li><p>另一种空格分隔输出结果的方法（末尾不带空格，适用于列表）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L = [1, 2, 3, 4, 5]</span><br><span class="line">print(&quot; &quot;.join(str(x) for x in L))</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="string">"ling"</span>, <span class="string">"yi"</span>, <span class="string">"er"</span>, <span class="string">"san"</span>, <span class="string">"si"</span>, <span class="string">"wu"</span>, <span class="string">"liu"</span>, <span class="string">"qi"</span>, <span class="string">"ba"</span>, <span class="string">"jiu"</span>]</span><br><span class="line">s = input()</span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> s:     <span class="comment"># 求和</span></span><br><span class="line">    n = n + int(x)</span><br><span class="line"></span><br><span class="line">ans = str(n)    <span class="comment"># 类型转换成字符串</span></span><br><span class="line"><span class="keyword">for</span> i, t <span class="keyword">in</span> enumerate(ans):  <span class="comment"># 同时遍历字符和索引</span></span><br><span class="line">    print(<span class="string">' '</span> <span class="keyword">if</span> i &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="string">''</span>, li[int(t)], sep = <span class="string">''</span>, end = <span class="string">''</span>) <span class="comment"># 空格分隔输出</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/&quot;&gt; PAT 甲级目录&lt;/a&gt;  |  &lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/&quot;&gt; PAT 乙级目录&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;
    
    </summary>
    
      <category term="PAT题解" scheme="http://lulalap.com/categories/PAT%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="PAT" scheme="http://lulalap.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT B1003 我要通过！(C++)</title>
    <link href="http://lulalap.com/2018/11/11/PAT-B1003-cpp/"/>
    <id>http://lulalap.com/2018/11/11/PAT-B1003-cpp/</id>
    <published>2018-11-11T04:13:41.000Z</published>
    <updated>2018-11-12T14:48:49.055Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/"> PAT 甲级目录</a>  |  <a href="http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/"> PAT 乙级目录</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>“<strong>答案正确</strong>”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“<strong>答案正确</strong>”大派送 —— 只要读入的字符串满足下列条件，系统就输出“<strong>答案正确</strong>”，否则输出“<strong>答案错误</strong>”。<br><a id="more"></a></p><p>得到“<strong>答案正确</strong>”的条件是：</p><ul><li>字符串中必须仅有 P、 A、 T这三种字符，不可以包含其它字符；</li><li>任意形如 xPATx 的字符串都可以获得“<strong>答案正确</strong>”，其中 x 或者是空字符串，或者是仅由字母 A 组成的字符串；</li><li>如果 aPbTc 是正确的，那么 aPbATca 也是正确的，其中 a、 b、 c 均或者是空字符串，或者是仅由字母 A 组成的字符串。<br>现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“<strong>答案正确</strong>”的。</li></ul><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 $n (&lt;10)$，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>每个字符串的检测结果占一行，如果该字符串可以获得“<strong>答案正确</strong>”，则输出 <strong>YES</strong>，否则输出 <strong>NO</strong>。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">PAT</span><br><span class="line">PAAT</span><br><span class="line">AAPATAA</span><br><span class="line">AAPAATAAAA</span><br><span class="line">xPATx</span><br><span class="line">PT</span><br><span class="line">Whatever</span><br><span class="line">APAAATAA</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">YES</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br><span class="line">NO</span><br></pre></td></tr></table></figure><h4 id="易错点："><a href="#易错点：" class="headerlink" title="易错点："></a>易错点：</h4><ul><li>实际上正确的字符串等价于: (‘P’左边’A’的个数) * (中间’A’的个数) = ‘T’右边’A’的个数</li><li>中间’A’的个数不少于一个</li><li>‘P’和’T’分别只能出现一次</li></ul><h4 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">string</span> s;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">  getchar();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">    <span class="keyword">bool</span> valid = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> LeftA = <span class="number">0</span>, InsideA = <span class="number">0</span>, RightA = <span class="number">0</span>, P = <span class="number">0</span>, T = <span class="number">0</span>;</span><br><span class="line">    getline(<span class="built_in">cin</span>, s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s.length(); j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(s[j] != <span class="string">'P'</span> &amp;&amp; s[j] != <span class="string">'A'</span> &amp;&amp; s[j] != <span class="string">'T'</span>)&#123;</span><br><span class="line">        valid = <span class="literal">false</span>; <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(s[j] == <span class="string">'A'</span>)&#123;      <span class="comment">// 统计三个位置A的个数</span></span><br><span class="line">        <span class="keyword">if</span>(P == <span class="number">0</span>) LeftA++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(P == <span class="number">1</span> &amp;&amp; T == <span class="number">0</span>) InsideA++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(P == <span class="number">1</span> &amp;&amp; T == <span class="number">1</span>) RightA++;</span><br><span class="line">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(s[j] == <span class="string">'P'</span>) P++;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(s[j] == <span class="string">'T'</span>) T++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(P != <span class="number">1</span> || T != <span class="number">1</span> || InsideA == <span class="number">0</span>) valid = <span class="literal">false</span>;  <span class="comment">// 两个条件都满足输出“YES”</span></span><br><span class="line">    <span class="keyword">if</span>(RightA != LeftA * InsideA) valid = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(valid) <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/&quot;&gt; PAT 甲级目录&lt;/a&gt;  |  &lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/&quot;&gt; PAT 乙级目录&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;“&lt;strong&gt;答案正确&lt;/strong&gt;”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“&lt;strong&gt;答案正确&lt;/strong&gt;”大派送 —— 只要读入的字符串满足下列条件，系统就输出“&lt;strong&gt;答案正确&lt;/strong&gt;”，否则输出“&lt;strong&gt;答案错误&lt;/strong&gt;”。&lt;br&gt;
    
    </summary>
    
      <category term="PAT题解" scheme="http://lulalap.com/categories/PAT%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="PAT" scheme="http://lulalap.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>数据科学中常用的 Python 语法(进阶)</title>
    <link href="http://lulalap.com/2018/11/09/python-tutorails-advanced-level/"/>
    <id>http://lulalap.com/2018/11/09/python-tutorails-advanced-level/</id>
    <published>2018-11-09T12:45:01.000Z</published>
    <updated>2018-11-10T06:36:41.590Z</updated>
    
    <content type="html"><![CDATA[<p>这两天在看这本 <em><a href="https://book.douban.com/subject/26364377/" target="_blank" rel="noopener">Data Science from Scrach</a></em> ( <a href="http://www.zhanjunlang.com/resources/tutorial/Data%20Science%20from%20Scratch%20First%20Principles%20with%20Python.pdf" target="_blank" rel="noopener">PDF地址</a> )，是本不错的通俗易懂的数据科学入门书籍。其中一个章节介绍了一下 Python 的基础语法和数据科学常用的进阶语法，觉得介绍得不错，很简洁明了，所以将其翻译一下放在这里以作备忘。<br><a href="http://lulalap.com/2018/11/07/python-tutorails-basic-level/">数据科学中常用的 Python 语法(基础)</a><br><a href="http://lulalap.com/2018/11/09/python-tutorails-advanced-level/">数据科学中常用的 Python 语法(进阶)</a><br><a id="more"></a></p><p>本章侧重于介绍在数据处理中非常有用的 Python 进阶语法和功能（基于 Python 2.7 ）。</p><h3 id="排序-Sorting"><a href="#排序-Sorting" class="headerlink" title="排序 Sorting"></a>排序 Sorting</h3><p>如果你想对 Python 的列表进行排序，可以使用列表的 <em>sort</em> 方法。如果你不想破坏原列表，可以使用 <em>sorted</em> 函数返回一个新的排好序的列表:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">y = sorted(x)       <span class="comment"># y = [1,2,3,4], x 不变</span></span><br><span class="line">x.sort()            <span class="comment"># 当前 x = [1,2,3,4]</span></span><br></pre></td></tr></table></figure><p><em>sort</em> 或 <em>sorted</em> 是默认从小到大对列表进行排序的。</p><p>如果想让它从大到小排序，可以指定一个 <em>reverse = True</em> 的参数。</p><p>也可以自定义排序函数，让列表按照指定关键字进行排序:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照绝对值从大到小排序</span></span><br><span class="line">x = sorted([<span class="number">-4</span>,<span class="number">1</span>,<span class="number">-2</span>,<span class="number">3</span>], key=abs, reverse=<span class="keyword">True</span>) <span class="comment"># is [-4,3,-2,1]</span></span><br><span class="line"><span class="comment"># 按照单词出现的次数从大到小进行排序</span></span><br><span class="line">          wc = sorted(word_counts.items(),</span><br><span class="line">          key=<span class="keyword">lambda</span> (word, count): count,</span><br><span class="line">          reverse=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><h3 id="列表解析-List-Comprehensions"><a href="#列表解析-List-Comprehensions" class="headerlink" title="列表解析 List Comprehensions"></a>列表解析 List Comprehensions</h3><p>我们会经常遇到这样的情况，想要提取列表中特定几个元素组成新的列表，或是改变其中几个元素的值，或者皆有。Python 中的惯用做法就是 <em>列表解析（List Comprehensions）</em> :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">even_numbers = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>) <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>]  <span class="comment"># [0, 2, 4]</span></span><br><span class="line">squares = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>)]                 <span class="comment"># [0, 1, 4, 9, 16]</span></span><br><span class="line">even_squares = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> even_numbers]        <span class="comment"># [0, 4, 16]</span></span><br></pre></td></tr></table></figure><p>类似地你可以将列表变成字典或集合:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">square_dict = &#123; x : x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>) &#125;       <span class="comment"># &#123; 0:0, 1:1, 2:4, 3:9, 4:16 &#125;</span></span><br><span class="line">square_set = &#123; x * x <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">-1</span>] &#125;             <span class="comment"># &#123; 1 &#125;</span></span><br></pre></td></tr></table></figure><p>如果你不需要使用到列表中的元素，那么可以将下划线当作变量:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zeroes = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> even_numbers] <span class="comment"># 与列表 even_numbers 有相同的长度</span></span><br></pre></td></tr></table></figure><p>列表解析支持多重 for 循环:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pairs = [(x, y)</span><br><span class="line">         <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)</span><br><span class="line">         <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">10</span>)]    <span class="comment"># 共100对： (0,0) (0,1) ... (9,8), (9,9)</span></span><br></pre></td></tr></table></figure><p>后面的 for 循环可以使用前面 for 循环的结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">increasing_pairs = [(x, y)                      <span class="comment"># 只包含 x &lt; y 的数据对</span></span><br><span class="line">                    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)          <span class="comment"># range(lo, hi) equals</span></span><br><span class="line">                    <span class="keyword">for</span> y <span class="keyword">in</span> range(x + <span class="number">1</span>, <span class="number">10</span>)]  <span class="comment"># [lo, lo + 1, ..., hi - 1]</span></span><br></pre></td></tr></table></figure><p>未来我们将会经常用到列表解析。</p><h3 id="生成器和迭代器-Generators-and-Iterators"><a href="#生成器和迭代器-Generators-and-Iterators" class="headerlink" title="生成器和迭代器 Generators and Iterators"></a>生成器和迭代器 Generators and Iterators</h3><p>列表有一个问题就是一不小心就会变得非常庞大，比如 range(1000000) 将会生成一个具有一百万个元素的列表。如果一次只处理一个数据，耗时可能会过长（或内存耗尽）。而实际上你可能只用到前几个数据，这样其他运算就是多余的。</p><p>而生成器可以让你只迭代那些需要用到的数据。可以使用函数和 <em>yield</em> 表达式来创建一个生成器:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lazy_range</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""a lazy version of range"""</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>译者补充：<br>生成器也是一种特殊迭代器，yield 是生成器实现迭代的关键。它作为生成器执行的暂停恢复点，可以对 yield 表达式进行赋值，也可以将 yield 表达式的值返回。任何包含 yield 语句的函数被称为生成器。跳出生成器时，生成器将当前执行状态保存，并在下次执行时恢复现场，以获得下一个迭代值。采用列表迭代将会占用大量地址空间，而使用生成器差不多只占用一个地址空间，从而达到节约内存的效果。</p><p>下面这个循环将一次消耗一个 yield 中的值直到消耗完毕:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lazy_range(<span class="number">10</span>):</span><br><span class="line">    do_something_with(i)</span><br></pre></td></tr></table></figure><p>(事实上 Python 自带了一个实现如上 _lazy_range_ 效果的函数，称为 <em>xrange</em>, Python 3 中称为 <em>lazy</em>.) 这意味着你可以创建一个无穷数列:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">natural_numbers</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""返回 1, 2, 3, ..."""</span></span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> n</span><br><span class="line">        n += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>不过并不建议使用这种没有退出循环逻辑的语句。</p><ul><li>TIP<br>使用生成器迭代的一个缺点就是，从头到尾对元素只能迭代一次，如果想实现多次迭代，你只能每次都创建新的生成器或者使用列表。</li></ul><p>第二种创建生成器的方法：利用括号内的解析表达式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lazy_evens_below_20 = (i <span class="keyword">for</span> i <span class="keyword">in</span> lazy_range(<span class="number">20</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>我们知道字典中的 <em>items()</em> 方法将返回一列表的字典中全部的键值对，但更多情况下，我们使用 <em>iteritems()</em> 生成器方法来进行迭代，每次只产生并返回一个键值对。</p><h3 id="随机-Randomness"><a href="#随机-Randomness" class="headerlink" title="随机 Randomness"></a>随机 Randomness</h3><p>在学习数据科学的时候，我们将会经常需要生成随机数，所以只要导入 <em>random</em> 模块就能使用:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">four_uniform_randoms = [random.random() <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line"><span class="comment"># [0.8444218515250481,        # random.random() 生成随机数</span></span><br><span class="line"><span class="comment"># 0.7579544029403025,         # 随机数被标准化处理，范围介于 0 和 1 之间</span></span><br><span class="line"><span class="comment"># 0.420571580830845,          # 该函数是最常用的用于生成随机数的函数</span></span><br><span class="line"><span class="comment"># 0.25891675029296335]</span></span><br></pre></td></tr></table></figure><p>如果你想获得可重现的结果，可以让 <em>random</em> 模块基于 <em>random.seed</em> 设置的内部状态生成伪随机（即确定性）数字:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">random.seed(<span class="number">10</span>)           <span class="comment"># set the seed to 10</span></span><br><span class="line"><span class="keyword">print</span> random.random()     <span class="comment"># 0.57140259469</span></span><br><span class="line">random.seed(<span class="number">10</span>)           <span class="comment"># reset the seed to 10</span></span><br><span class="line"><span class="keyword">print</span> random.random()     <span class="comment"># 0.57140259469 again</span></span><br></pre></td></tr></table></figure><p>有时候我们也会使用 <em>random.randrange</em> 函数来生成一个指定范围内的随机数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">random.randrange(<span class="number">10</span>)      <span class="comment"># 从 range(10) = [0, 1, ..., 9] 中随机选择一个数</span></span><br><span class="line">random.randrange(<span class="number">3</span>, <span class="number">6</span>)    <span class="comment"># 从 range(3, 6) = [3, 4, 5] 随机选择一个数</span></span><br></pre></td></tr></table></figure><p>还有一些方法有时候用起来很方便，比如 <em>random.shuffle</em> 将打乱一个列表中的元素次序，重新生成一个随机排列的列表:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">up_to_ten = range(<span class="number">10</span>)</span><br><span class="line">random.shuffle(up_to_ten)</span><br><span class="line"><span class="keyword">print</span> up_to_ten</span><br><span class="line"><span class="comment"># [2, 5, 1, 9, 7, 3, 8, 6, 4, 0] (你得到的结果应该不同)</span></span><br></pre></td></tr></table></figure><p>如果想从一个列表中随机选择一个元素，可以使用 <em>random.choice</em> 方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">my_best_friend = random.choice([<span class="string">"Alice"</span>, <span class="string">"Bob"</span>, <span class="string">"Charlie"</span>]) <span class="comment"># 我得到的是 "Bob"</span></span><br></pre></td></tr></table></figure><p>如果既想要生成一个随机序列，又不想打乱原列表，可以使用 <em>random.sample</em> 方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lottery_numbers = range(<span class="number">60</span>)</span><br><span class="line">winning_numbers = random.sample(lottery_numbers, <span class="number">6</span>) <span class="comment"># [16, 36, 10, 6, 25, 9]</span></span><br></pre></td></tr></table></figure><p>你可以通过多次调用实现多个随机样本的选择（允许重复）:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">four_with_replacement = [random.choice(range(<span class="number">10</span>))</span><br><span class="line">                         <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>)]</span><br><span class="line"><span class="comment"># [9, 4, 4, 2]</span></span><br></pre></td></tr></table></figure><h3 id="正则表达式-Regular-Expressions"><a href="#正则表达式-Regular-Expressions" class="headerlink" title="正则表达式 Regular Expressions"></a>正则表达式 Regular Expressions</h3><p>正则表达式用于文本搜索，略显复杂但非常有用，因而有大量的书专门讲解正则表达式。我们遇到它们的时候再进行具体的解释，下面是一些在 Python 中使用正则表达式的例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">print</span> all([                                 <span class="comment"># 下面的表述全部返回 true, 因为</span></span><br><span class="line">    <span class="keyword">not</span> re.match(<span class="string">"a"</span>, <span class="string">"cat"</span>),               <span class="comment"># * 'cat' 不以 'a' 开头</span></span><br><span class="line">    re.search(<span class="string">"a"</span>, <span class="string">"cat"</span>),                  <span class="comment"># * 'cat' 中包含了字母 'a'</span></span><br><span class="line">    <span class="keyword">not</span> re.search(<span class="string">"c"</span>, <span class="string">"dog"</span>),              <span class="comment"># * 'dog' 中不包含字母 'c'</span></span><br><span class="line">    <span class="number">3</span> == len(re.split(<span class="string">"[ab]"</span>, <span class="string">"carbs"</span>)),    <span class="comment"># * 根据 a 或 b 将单词拆分成三部分 ['c','r','s']</span></span><br><span class="line">    <span class="string">"R-D-"</span> == re.sub(<span class="string">"[0-9]"</span>, <span class="string">"-"</span>, <span class="string">"R2D2"</span>)  <span class="comment"># * 用短横替换数字</span></span><br><span class="line">    ])                                      <span class="comment"># 输出 True</span></span><br></pre></td></tr></table></figure><h3 id="面向对象编程-Object-Oriented-Programming"><a href="#面向对象编程-Object-Oriented-Programming" class="headerlink" title="面向对象编程 Object-Oriented Programming"></a>面向对象编程 Object-Oriented Programming</h3><p>与许多语言一样，Python 允许你定义封装数据的类和对其进行操作的函数。我们有时会使用它们来使我们的代码更清晰简洁。通过构建一个带有大量注释的示例来解释它们可能是最简单的。假设没有内置的 Python 集合，我们可能想要创建自己的 <em>Set</em> 类。那么这个类应当具备哪些功能呢？比如给定一个 <em>Set</em> ，我们需要能够向其中添加项目，从中删除项目，并检查它是否包含特定值。所以，我们将创建所有这些功能将其作为该类的成员函数。这样，我们就可以在 <em>Set</em> 对象之后用点访问这些成员函数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照惯例，我们给出 _PascalCase_ 类的名称</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Set</span>:</span></span><br><span class="line">    <span class="comment"># 这些是成员函数</span></span><br><span class="line">    <span class="comment"># 每个成员函数都有一个置于首位的"self"参数(另一个惯例)</span></span><br><span class="line">    <span class="comment"># “self”对应于正在使用的特定的 Set 对象</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, values=None)</span>:</span></span><br><span class="line">        <span class="string">"""这是创建函数</span></span><br><span class="line"><span class="string">        每当你创建一个新的 Set 就会调用该函数</span></span><br><span class="line"><span class="string">        可以像这样调用</span></span><br><span class="line"><span class="string">        s1 = Set() # 空集合</span></span><br><span class="line"><span class="string">        s2 = Set([1,2,2,3]) # 根据指定值初始化集合"""</span></span><br><span class="line">        self.dict = &#123;&#125; <span class="comment"># Set 中的每个实例都有自己的 dict 属性</span></span><br><span class="line">        <span class="comment"># 我们使用该属性追踪每个成员</span></span><br><span class="line">        <span class="keyword">if</span> values <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">for</span> value <span class="keyword">in</span> values:</span><br><span class="line">            self.add(value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""这是 Set 对象中的字符串表达式</span></span><br><span class="line"><span class="string">        你可以通过向 Python 命令窗口键入字符串或者利用 str() 方法向对象传递字符串"""</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Set: "</span> + str(self.dict.keys())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 我们将通过成为 self.dict 中的键，并将键值设为 True 来表示成员资格</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.dict[value] = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果参数为字典中的键，对应的值就在 Set 中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">contains</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> value <span class="keyword">in</span> self.dict</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">del</span> self.dict[value]</span><br></pre></td></tr></table></figure><p>然后我们就可以像这样使用 Set:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = Set([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">s.add(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> s.contains(<span class="number">4</span>)     <span class="comment"># True</span></span><br><span class="line">s.remove(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">print</span> s.contains(<span class="number">3</span>)     <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h3 id="函数工具-Functional-Tools"><a href="#函数工具-Functional-Tools" class="headerlink" title="函数工具 Functional Tools"></a>函数工具 Functional Tools</h3><h4 id="部分函数-partial"><a href="#部分函数-partial" class="headerlink" title="部分函数 partial"></a>部分函数 partial</h4><p>当传递函数时，有时我们会想要使用某函数的部分功能以创建新函数。举个简单的例子，假设我们有两个变量的函数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">(base, power)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> base ** power</span><br></pre></td></tr></table></figure><p>我们想要利用它来创建一个函数，该函数输入一个变量，输出底数为 2 的幂函数 <em>exp(2, power)</em> 的结果。</p><p>当然，我们可以用 <em>def</em> 定义一个新的函数，虽然这看起来不太明智:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two_to_the</span><span class="params">(power)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> exp(<span class="number">2</span>, power)</span><br></pre></td></tr></table></figure><p>更聪明的做法是利用 <em>functools.partial</em> 方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line">two_to_the = partial(exp, <span class="number">2</span>)      <span class="comment"># 当前函数只有一个变量</span></span><br><span class="line"><span class="keyword">print</span> two_to_the(<span class="number">3</span>)               <span class="comment"># 8</span></span><br></pre></td></tr></table></figure><p>如果指定了名称，也可以使用 <em>partial</em> 方法填充其他的参数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">square_of = partial(exp, power=<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> square_of(<span class="number">3</span>)                <span class="comment"># 9</span></span><br></pre></td></tr></table></figure><p>如果你尝试在函数中间乱用参数，那么程序将很快就会变得混乱，所以请尽量避免这种行为。</p><h4 id="映射-map"><a href="#映射-map" class="headerlink" title="映射 map"></a>映射 map</h4><p>我们偶尔也会使用 <em>map</em>，<em>reduce</em>，和 <em>filter</em> 等函数来作为列表解析的功能替代:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * x</span><br><span class="line"></span><br><span class="line">xs = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">twice_xs = [double(x) <span class="keyword">for</span> x <span class="keyword">in</span> xs]      <span class="comment"># [2, 4, 6, 8]</span></span><br><span class="line">twice_xs = map(double, xs)              <span class="comment"># 同上</span></span><br><span class="line">list_doubler = partial(map, double)     <span class="comment"># 函数功能是将列表加倍</span></span><br><span class="line">twice_xs = list_doubler(xs)             <span class="comment"># 也是 [2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure><p><em>map</em> 方法还可以用于多参数函数到多列表的映射:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(x, y)</span>:</span> <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line">products = map(multiply, [<span class="number">1</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">5</span>])  <span class="comment"># [1 * 4, 2 * 5] = [4, 10]</span></span><br></pre></td></tr></table></figure><h4 id="过滤器-filter"><a href="#过滤器-filter" class="headerlink" title="过滤器 filter"></a>过滤器 filter</h4><p>类似地，过滤器实现的是列表解析中 <em>if</em> 的功能:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_even</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""若 x 为偶数则返回 True，x 为奇数则返回 False"""</span></span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">x_evens = [x <span class="keyword">for</span> x <span class="keyword">in</span> xs <span class="keyword">if</span> is_even(x)]   <span class="comment"># [2, 4]</span></span><br><span class="line">x_evens = filter(is_even, xs)             <span class="comment"># 同上</span></span><br><span class="line">list_evener = partial(filter, is_even)    <span class="comment"># 该函数实现过滤功能</span></span><br><span class="line">x_evens = list_evener(xs)                 <span class="comment"># 也是 [2, 4]</span></span><br></pre></td></tr></table></figure><h4 id="缩减-reduce"><a href="#缩减-reduce" class="headerlink" title="缩减 reduce"></a>缩减 reduce</h4><p><em>reduce</em> 方法不断合并列表中的第一个和第二个元素，然后将结果与第三个元素合并，并一直重复这个过程，直到得到一个唯一的结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x_product = reduce(multiply, xs)          <span class="comment"># = 1 * 2 * 3 * 4 = 24</span></span><br><span class="line">list_product = partial(reduce, multiply)  <span class="comment"># 该函数实现缩减一个列表</span></span><br><span class="line">x_product = list_product(xs)              <span class="comment"># 也是 24</span></span><br></pre></td></tr></table></figure><h3 id="枚举-enumerate"><a href="#枚举-enumerate" class="headerlink" title="枚举 enumerate"></a>枚举 enumerate</h3><p>偶尔会出现这样的情况，在遍历一个列表的时候同时要使用元素和其索引:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不太 Python（不太简洁优美）</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(documents)):</span><br><span class="line">    document = documents[i]</span><br><span class="line">    do_something(i, document)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同样不太 Python（不太简洁优美）</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> document <span class="keyword">in</span> documents:</span><br><span class="line">    do_something(i, document)</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>最简洁的做法是使用 <em>enumerate</em> 枚举方法生成一个元组 <em>tuples (index, element)</em>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, document <span class="keyword">in</span> enumerate(documents):</span><br><span class="line">    do_something(i, document)</span><br></pre></td></tr></table></figure><p>类似地，如果只想使用索引:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(documents)): do_something(i)   <span class="comment"># 不简洁</span></span><br><span class="line"><span class="keyword">for</span> i, _ <span class="keyword">in</span> enumerate(documents): do_something(i) <span class="comment"># 简洁</span></span><br></pre></td></tr></table></figure><p>后面我们将会经常使用这个方法。</p><h3 id="压缩和参数解压-zip-and-Argument-Unpacking"><a href="#压缩和参数解压-zip-and-Argument-Unpacking" class="headerlink" title="压缩和参数解压 zip and Argument Unpacking"></a>压缩和参数解压 zip and Argument Unpacking</h3><h4 id="压缩-zip"><a href="#压缩-zip" class="headerlink" title="压缩 zip"></a>压缩 zip</h4><p>我们经常会对两个或更多的列表进行压缩处理。压缩实际上就是将多列表转化为对应元组的单列表形式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">zip(list1, list2)       <span class="comment"># 得到 [('a', 1), ('b', 2), ('c', 3)]</span></span><br></pre></td></tr></table></figure><h4 id="参数解压-Argument-Unpacking"><a href="#参数解压-Argument-Unpacking" class="headerlink" title="参数解压 Argument Unpacking"></a>参数解压 Argument Unpacking</h4><p>如果多个列表长度不一致，那么压缩过程会在最短列表尾部停止。你也可以使用一个奇怪的 “unzip” 解压缩技巧对列表进行解压:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pairs = [(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">2</span>), (<span class="string">'c'</span>, <span class="number">3</span>)]</span><br><span class="line">letters, numbers = zip(*pairs)</span><br></pre></td></tr></table></figure><p>其中星号用于执行参数解压缩，它使用 <em>pairs</em> 的元素作为 <em>zip</em> 的单个参数。下面的调用方式具有同等效果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip((<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">2</span>), (<span class="string">'c'</span>, <span class="number">3</span>))  <span class="comment"># 返回 [('a','b','c'), ('1','2','3')]</span></span><br></pre></td></tr></table></figure><p>参数解压也可以和其他函数共同使用:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span> <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>)           <span class="comment"># 返回 3</span></span><br><span class="line">add([<span class="number">1</span>, <span class="number">2</span>])         <span class="comment"># 报错</span></span><br><span class="line">add(*[<span class="number">1</span>, <span class="number">2</span>])        <span class="comment"># 返回 3</span></span><br></pre></td></tr></table></figure><p>虽然不太实用，不过是个不错的让代码变得简洁的技巧。</p><h3 id="不定长参数传递-args-and-kwargs"><a href="#不定长参数传递-args-and-kwargs" class="headerlink" title="不定长参数传递 args and kwargs"></a>不定长参数传递 args and kwargs</h3><p>假设我们要创建一个高阶函数，该函数输入一个旧函数，并返回一个新的函数，新函数是旧函数乘以 2 :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doubler</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(x)</span>:</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">2</span> * f(x)</span><br><span class="line">    <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure><p>运行例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">g = doubler(f1)</span><br><span class="line"><span class="keyword">print</span> g(<span class="number">3</span>)        <span class="comment"># 8 (== ( 3 + 1) * 2)</span></span><br><span class="line"><span class="keyword">print</span> g(<span class="number">-1</span>)       <span class="comment"># 0 (== (-1 + 1) * 2)</span></span><br></pre></td></tr></table></figure><p>然而只要传递的参数大于一个，该方法就不太好用了:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">g = doubler(f2)</span><br><span class="line"><span class="keyword">print</span> g(<span class="number">1</span>, <span class="number">2</span>) <span class="comment"># 报错 TypeError: g() takes exactly 1 argument (2 given)</span></span><br></pre></td></tr></table></figure><p>所以我们需要指定一个函数，使得它能够容纳任意数量的参数，然后利用参数解压缩实现传递多个参数，这看起来有那么一点神奇:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">magic</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"unnamed args:"</span>, args</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"keyword args:"</span>, kwargs</span><br><span class="line">magic(<span class="number">1</span>, <span class="number">2</span>, key=<span class="string">"word"</span>, key2=<span class="string">"word2"</span>)</span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line"><span class="comment"># unnamed args: (1, 2)</span></span><br><span class="line"><span class="comment"># keyword args: &#123;'key2': 'word2', 'key': 'word'&#125;</span></span><br></pre></td></tr></table></figure><p>当我们像这样定义一个函数时，<em>args</em> (arguments 的缩写)是一个包含未命名参数的元组，而 <em>kwargs</em> (keyword arguments 的缩写)是包含命名参数的字典。</p><p>它们也可以用在传递的参数为列表（或元组）或数组的情况：<br>n:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">other_way_magic</span><span class="params">(x, y, z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y + z</span><br><span class="line"></span><br><span class="line">x_y_list = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">z_dict = &#123; <span class="string">"z"</span> : <span class="number">3</span> &#125;</span><br><span class="line"><span class="keyword">print</span> other_way_magic(*x_y_list, **z_dict)    <span class="comment"># 6</span></span><br></pre></td></tr></table></figure><p>你可以用它配合各种奇怪的方法使用，但我们只用它来解决高阶函数传递不定长参数的问题:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doubler_correct</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="string">"""不论 f 是什么都能有效运行"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""不论有多少参数，该函数都能正确将参数传递给 f"""</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * f(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line">g = doubler_correct(f2)</span><br><span class="line"><span class="keyword">print</span> g(<span class="number">1</span>, <span class="number">2</span>) <span class="comment"># 6</span></span><br></pre></td></tr></table></figure><h3 id="欢迎来到数据科学的世界！"><a href="#欢迎来到数据科学的世界！" class="headerlink" title="欢迎来到数据科学的世界！"></a>欢迎来到数据科学的世界！</h3><p>叮！恭喜你又打开了新世界的大门！接下来就可以去愉快地玩耍啦~</p><p><strong>相关阅读:</strong><br><a href="http://lulalap.com/2018/11/07/python-tutorails-basic-level/">数据科学中常用的 Python 语法(基础)</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天在看这本 &lt;em&gt;&lt;a href=&quot;https://book.douban.com/subject/26364377/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Data Science from Scrach&lt;/a&gt;&lt;/em&gt; ( &lt;a href=&quot;http://www.zhanjunlang.com/resources/tutorial/Data%20Science%20from%20Scratch%20First%20Principles%20with%20Python.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PDF地址&lt;/a&gt; )，是本不错的通俗易懂的数据科学入门书籍。其中一个章节介绍了一下 Python 的基础语法和数据科学常用的进阶语法，觉得介绍得不错，很简洁明了，所以将其翻译一下放在这里以作备忘。&lt;br&gt;&lt;a href=&quot;http://lulalap.com/2018/11/07/python-tutorails-basic-level/&quot;&gt;数据科学中常用的 Python 语法(基础)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://lulalap.com/2018/11/09/python-tutorails-advanced-level/&quot;&gt;数据科学中常用的 Python 语法(进阶)&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="数据科学" scheme="http://lulalap.com/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="Python" scheme="http://lulalap.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>数据科学中 Python 的常用语法(基础)</title>
    <link href="http://lulalap.com/2018/11/07/python-tutorails-basic-level/"/>
    <id>http://lulalap.com/2018/11/07/python-tutorails-basic-level/</id>
    <published>2018-11-07T14:28:02.000Z</published>
    <updated>2018-11-10T06:35:57.956Z</updated>
    
    <content type="html"><![CDATA[<p>这两天在看这本 <em><a href="https://book.douban.com/subject/26364377/" target="_blank" rel="noopener">Data Science from Scrach</a></em> ( <a href="http://www.zhanjunlang.com/resources/tutorial/Data%20Science%20from%20Scratch%20First%20Principles%20with%20Python.pdf" target="_blank" rel="noopener">PDF地址</a> )，是本不错的通俗易懂的数据科学入门书籍。其中一个章节介绍了一下 Python 的基础语法和数据科学常用的进阶语法，觉得介绍得不错，很简洁明了，所以将其翻译一下放在这里以作备忘。<br><a href="http://lulalap.com/2018/11/07/python-tutorails-basic-level/">数据科学中常用的 Python 语法(基础)</a><br><a href="http://lulalap.com/2018/11/09/python-tutorails-advanced-level/">数据科学中常用的 Python 语法(进阶)</a><br><a id="more"></a></p><p>本章侧重于介绍在数据处理中非常有用的 Python 基础语法和功能（基于 Python 2.7 ）。</p><h3 id="空格格式"><a href="#空格格式" class="headerlink" title="空格格式"></a>空格格式</h3><p>许多语言使用括号来控制代码块，但 Python 用的是缩进：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]:</span><br><span class="line">    <span class="keyword">print</span> i           <span class="comment"># "for i"循环的第一行</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]:</span><br><span class="line">        <span class="keyword">print</span> j       <span class="comment"># "for j"循环的第一行</span></span><br><span class="line">        <span class="keyword">print</span> i + j   <span class="comment"># "for j"循环的最后一行</span></span><br><span class="line">    <span class="keyword">print</span> i           <span class="comment"># "for i"循环的最后一行</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"done looping"</span></span><br></pre></td></tr></table></figure></p><p>这使得 Python 的代码非常易于阅读，但也意味着你要时刻注意格式。括号里的空格将会被忽略，这在写长表达式时很有用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">long_winded_computation = (<span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> + <span class="number">4</span> + <span class="number">5</span> + <span class="number">6</span> + <span class="number">7</span> + <span class="number">8</span> + <span class="number">9</span> + <span class="number">10</span> + <span class="number">11</span> + <span class="number">12</span> + <span class="number">13</span> + <span class="number">14</span> + <span class="number">15</span> + <span class="number">16</span> + <span class="number">17</span> + <span class="number">18</span> + <span class="number">19</span> + <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>也使得代码变得好读：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list_of_lists = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">easier_to_read_list_of_lists = [ [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">                                 [<span class="number">4</span> ,<span class="number">5</span> ,<span class="number">6</span> ],</span><br><span class="line">                                 [<span class="number">7</span> ,<span class="number">8</span> ,<span class="number">9</span> ] ]</span><br></pre></td></tr></table></figure><h3 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h3><p>可以用一个反斜杠来表示连接中断的两行（这种做法很少用）：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">two_plus_three = <span class="number">2</span> + \</span><br><span class="line">                 <span class="number">3</span></span><br></pre></td></tr></table></figure></p><h3 id="模块-Modules"><a href="#模块-Modules" class="headerlink" title="模块 Modules"></a>模块 Modules</h3><p>不论是 Python 自带的模块还是自己下载的第三方的模块，都需要需要通过手动导入才能使用。</p><p>1.简单地直接导入整个模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">my_regex = re.compile(<span class="string">"[0-9]+"</span>, re.I)</span><br></pre></td></tr></table></figure><p>这里导入的 <em>re</em> 模块是用于正则表达式的。导入模块后，可以直接将模块名字作为前缀（re.）来调用具体功能。</p><p>2.如果调入的模块名称已经在代码中被使用，可以将模块导入时映射到另一个名称中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re <span class="keyword">as</span> regex</span><br><span class="line">my_regex = regex.compile(<span class="string">"[0-9]+"</span>, regex.I)</span><br></pre></td></tr></table></figure><p>3.如果你很坏，你就可以将整个模块都导入到当前命名空间，这可能在不经意间覆盖你已经定义好的变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">match = <span class="number">10</span></span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> *  <span class="comment"># re 模块中有一个 match 函数</span></span><br><span class="line"><span class="keyword">print</span> match       <span class="comment"># 输出 match 函数</span></span><br></pre></td></tr></table></figure><p>因为你是个好人，所以我相信你不会这么做的。</p><h3 id="四则运算-Arithmetic"><a href="#四则运算-Arithmetic" class="headerlink" title="四则运算 Arithmetic"></a>四则运算 Arithmetic</h3><p>Python 2.7 默认使用整除，所以 $ 5 / 2 = 2 $.但很多时候我们并不想要整除，所以可以导入这个模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br></pre></td></tr></table></figure><p>导入后，就有 $5 / 2 = 2.5$.<br>整除：$5 // 2 = 2$.</p><h3 id="函数-Functions"><a href="#函数-Functions" class="headerlink" title="函数 Functions"></a>函数 Functions</h3><h4 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h4><p>函数是能够接收 0 个或多个输入，并返回一定输出的一个规则。在 Python 中，我们用 <strong><em>def 函数名(参数)</em></strong> 定义一个函数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""你可以在这里写一些关于函数功能的解释</span></span><br><span class="line"><span class="string">    比如，该函数将输入内容乘2"""</span></span><br><span class="line">    <span class="comment"># 这里可以写函数主体，记得缩进</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="函数使用"><a href="#函数使用" class="headerlink" title="函数使用"></a>函数使用</h4><p>在 Python 中，函数是最低等级的存在，这意味着我们可以将函数赋值给一个变量，也可以将它作为一个参数传递给其他变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply_to_one</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="string">"""调用函数 f 并将 1 作为函数参数"""</span></span><br><span class="line">    <span class="keyword">return</span> f(<span class="number">1</span>)</span><br><span class="line">my_double = double          <span class="comment"># double 指向上一节定义的函数</span></span><br><span class="line">x = apply_to_one(my_double) <span class="comment"># x 等于 2</span></span><br></pre></td></tr></table></figure><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>还可以通过 <em>lambda</em> 来创建匿名函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y = apply_to_one(<span class="keyword">lambda</span> x: x + <span class="number">4</span>)     <span class="comment"># 等于 5</span></span><br></pre></td></tr></table></figure><p>可以将 <em>lambda</em> 赋值给其他变量，但大多数人会建议你还是尽量使用 <em>def</em> ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">another_double = <span class="keyword">lambda</span> x: <span class="number">2</span> * x      <span class="comment"># 不建议</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">another_double</span><span class="params">(x)</span>:</span> <span class="keyword">return</span> <span class="number">2</span> * x   <span class="comment"># 建议做法</span></span><br></pre></td></tr></table></figure><p>补充：</p><ul><li><em>lambda</em> 只是一个表达式，函数体比 <em>def</em> 简单很多。</li><li><em>lambda</em> 的主体是一个表达式，而不是一个代码块。仅仅能在 <em>lambda</em> 表达式中封装有限的逻辑进去。</li></ul><h4 id="函数参数传递"><a href="#函数参数传递" class="headerlink" title="函数参数传递"></a>函数参数传递</h4><p>函数参数可以定义默认值，函数表达式不加参数将使用默认值，加参数将传递指定值:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_print</span><span class="params">(message=<span class="string">"my default message"</span>)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> message</span><br><span class="line">my_print(<span class="string">"hello"</span>)     <span class="comment"># 输出 "hello"</span></span><br><span class="line">my_print()            <span class="comment"># 输出 "my default message"</span></span><br></pre></td></tr></table></figure><p>有时候直接通过参数名称来指定参数也很好用:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subtract</span><span class="params">(a=<span class="number">0</span>, b=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a - b</span><br><span class="line">subtract(<span class="number">10</span>, <span class="number">5</span>)   <span class="comment"># 返回 5</span></span><br><span class="line">subtract(<span class="number">0</span>, <span class="number">5</span>)    <span class="comment"># 返回 -5</span></span><br><span class="line">subtract(b=<span class="number">5</span>)     <span class="comment"># 与上一个相同，返回 -5</span></span><br></pre></td></tr></table></figure><h3 id="字符串-Strings"><a href="#字符串-Strings" class="headerlink" title="字符串 Strings"></a>字符串 Strings</h3><p>可以使用单引号或双引号来创建字符串（引号一定要配对）:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">single_quoted_string = <span class="string">'data science'</span></span><br><span class="line">double_quoted_string = <span class="string">"data science"</span></span><br></pre></td></tr></table></figure><p>用反斜杠来表示转义字符，如:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tab_string = <span class="string">"\t"</span>      <span class="comment"># 表示制表符 tab</span></span><br><span class="line">len(tab_string)        <span class="comment"># 等于 1</span></span><br></pre></td></tr></table></figure><p>当你想要使用反斜杠本身 (用于 Windows 目录或者正则表达式), 可以通过使用原始字符串 r” “ 定义:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">not_tab_string = <span class="string">r"\t"</span> <span class="comment"># 表示字符 '\' 和 't'</span></span><br><span class="line">len(not_tab_string)    <span class="comment"># 等于 2</span></span><br></pre></td></tr></table></figure><p>利用三个双引号创建多行字符串:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">multi_line_string = <span class="string">"""这是第一行</span></span><br><span class="line"><span class="string">这是第二行</span></span><br><span class="line"><span class="string">这是第三行"""</span></span><br></pre></td></tr></table></figure><h3 id="异常处理-Exception"><a href="#异常处理-Exception" class="headerlink" title="异常处理 Exception"></a>异常处理 Exception</h3><p>当程序出错，Python 会发生一个 <em>异常(exception)</em>，我们不对其进行处理的话，程序将会终止执行。捕获异常可以用 try 和 except 语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="number">0</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"不能除以0"</span></span><br></pre></td></tr></table></figure><p>尽管在其他语言中，异常被看作是不好的现象，但在 Python 中，多处理异常将会使你的代码更加简洁干净。</p><h3 id="列表-Lists"><a href="#列表-Lists" class="headerlink" title="列表 Lists"></a>列表 Lists</h3><h4 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h4><p>列表是简单的有序集合，也是 Python 中最基础的数据结构 (类似其他语言中的数组，但列表具有一些额外的特性)。创建一个列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">integer_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">heterogeneous_list = [<span class="string">"string"</span>, <span class="number">0.1</span>, <span class="keyword">True</span>]</span><br><span class="line">list_of_lists = [ integer_list, heterogeneous_list, [] ]</span><br><span class="line">list_length = len(integer_list)   <span class="comment"># 等于 3</span></span><br><span class="line">list_sum = sum(integer_list)      <span class="comment"># 等于 6</span></span><br></pre></td></tr></table></figure><h4 id="访问列表中的值"><a href="#访问列表中的值" class="headerlink" title="访问列表中的值"></a>访问列表中的值</h4><p>你可以通过方括号索引列表中的值:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = range(<span class="number">10</span>)       <span class="comment"># 列表获得列表 x = [0, 1, ..., 9]</span></span><br><span class="line">zero = x[<span class="number">0</span>]         <span class="comment"># 等于 0, 列表序号从 0 开始</span></span><br><span class="line">one = x[<span class="number">1</span>]          <span class="comment"># 等于 1</span></span><br><span class="line">nine = x[<span class="number">-1</span>]        <span class="comment"># 等于 9, 列表中最后一个元素</span></span><br><span class="line">eight = x[<span class="number">-2</span>]       <span class="comment"># 等于 8, 列表中倒数第二个元素</span></span><br><span class="line">x[<span class="number">0</span>] = <span class="number">-1</span>           <span class="comment"># 当前列表 x = [-1, 1, 2, 3, ..., 9]</span></span><br></pre></td></tr></table></figure><h4 id="截取列表"><a href="#截取列表" class="headerlink" title="截取列表"></a>截取列表</h4><p>可以用方括号截取列表:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">first_three = x[:<span class="number">3</span>]                  <span class="comment"># [-1, 1, 2]</span></span><br><span class="line">three_to_end = x[<span class="number">3</span>:]                 <span class="comment"># [3, 4, ..., 9]</span></span><br><span class="line">one_to_four = x[<span class="number">1</span>:<span class="number">5</span>]                 <span class="comment"># [1, 2, 3, 4]</span></span><br><span class="line">last_three = x[<span class="number">-3</span>:]                  <span class="comment"># [7, 8, 9]</span></span><br><span class="line">without_first_and_last = x[<span class="number">1</span>:<span class="number">-1</span>]     <span class="comment"># [1, 2, ..., 8]</span></span><br><span class="line">copy_of_x = x[:]                     <span class="comment"># [-1, 1, 2, ..., 9]</span></span><br></pre></td></tr></table></figure><p>可以用 <em>in</em> 来查看某元素是否在列表中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]        <span class="comment"># True</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]        <span class="comment"># False</span></span><br></pre></td></tr></table></figure><p>这种元素查找方式效率很低，只有在列表很小或者你不在意查找时间的情况下再去使用。</p><h4 id="拼接列表"><a href="#拼接列表" class="headerlink" title="拼接列表"></a>拼接列表</h4><p>Python 中很容易就能拼接两个列表:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">x.extend([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])   <span class="comment"># 当前 x = [1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure><p>如果你不想修改原列表 x ，你可以使用“加”运算符创建一个新的列表:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">y = x + [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]     <span class="comment"># 当前 y = [1, 2, 3, 4, 5, 6]; x 没有变化</span></span><br></pre></td></tr></table></figure><p>经常用这样的方式一次在列表中添加一个元素:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">x.append(<span class="number">0</span>)           <span class="comment"># 当前 x = [1, 2, 3, 0]</span></span><br><span class="line">y = x[<span class="number">-1</span>]             <span class="comment"># 等于 0</span></span><br><span class="line">z = len(x)            <span class="comment"># 等于 4</span></span><br></pre></td></tr></table></figure><h4 id="列表分解"><a href="#列表分解" class="headerlink" title="列表分解"></a>列表分解</h4><p>如果你知道列表中有多少个元素，那么很容易就能分解这个列表:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x, y = [<span class="number">1</span>, <span class="number">2</span>]         <span class="comment"># 当前 x = 1, y = 2</span></span><br></pre></td></tr></table></figure><p>等式两边元素数目不一致的话，你将会得到一个 <em>值错误</em>，所以我们更经常用下划线来存放列表剩下的部分:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_, y = [<span class="number">1</span>, <span class="number">2</span>]         <span class="comment"># 当前 y == 2, 不管第一个元素</span></span><br></pre></td></tr></table></figure><h3 id="元组-Tuples"><a href="#元组-Tuples" class="headerlink" title="元组 Tuples"></a>元组 Tuples</h3><p>列表和元组很像，和列表唯一的区别就是，元组中的元素不能被修改。</p><h4 id="元组创建"><a href="#元组创建" class="headerlink" title="元组创建"></a>元组创建</h4><p>可以使用圆括号或者不加任何括号来创建元组:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">my_tuple = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">other_tuple = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">my_list[<span class="number">1</span>] = <span class="number">3</span>        <span class="comment"># 当前 my_list 为 [1, 3]</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    my_tuple[<span class="number">1</span>] = <span class="number">3</span></span><br><span class="line"><span class="keyword">except</span> TypeError:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"无法修改元组"</span></span><br></pre></td></tr></table></figure><p>利用元组能够很方便地从函数中获取多个返回值:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_and_product</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (x + y),(x * y)</span><br><span class="line">sp = sum_and_product(<span class="number">2</span>, <span class="number">3</span>)    <span class="comment"># 等于 (5, 6)</span></span><br><span class="line">s, p = sum_and_product(<span class="number">5</span>, <span class="number">10</span>) <span class="comment"># s = 15, p = 50</span></span><br></pre></td></tr></table></figure><p>元组（和列表）都支持同时赋值多个元素:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x, y = <span class="number">1</span>, <span class="number">2</span>       <span class="comment"># 当前 x = 1, y = 2</span></span><br><span class="line">x, y = y, x       <span class="comment"># Python 中交换两个变量的值; 当前 x = 2, y = 1</span></span><br></pre></td></tr></table></figure><h3 id="字典-Dictionaries"><a href="#字典-Dictionaries" class="headerlink" title="字典 Dictionaries"></a>字典 Dictionaries</h3><h4 id="字典创建"><a href="#字典创建" class="headerlink" title="字典创建"></a>字典创建</h4><p>Python 中的另一个基础数据结构是字典，它能让你通过关键字（key）快速获得对应的值（value）:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">empty_dict = &#123;&#125;                       <span class="comment"># 非常 Python 化的空字典定义</span></span><br><span class="line">empty_dict2 = dict()                  <span class="comment"># 没那么 Python 化的空字典定义</span></span><br><span class="line">grades = &#123; <span class="string">"Joel"</span> : <span class="number">80</span>, <span class="string">"Tim"</span> : <span class="number">95</span> &#125;  <span class="comment"># 字典存储</span></span><br></pre></td></tr></table></figure><h4 id="字典元素查找"><a href="#字典元素查找" class="headerlink" title="字典元素查找"></a>字典元素查找</h4><p>你可以用方括号加关键字来查找对应的值:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">joels_grade = grades[<span class="string">"Joel"</span>]          <span class="comment"># 等于 80</span></span><br></pre></td></tr></table></figure><p>如果要查找的关键字不在字典中，将返回一个 <em>键错误(KeyError)</em> :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    kates_grade = grades[<span class="string">"Kate"</span>]</span><br><span class="line"><span class="keyword">except</span> KeyError:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"no grade for Kate!"</span></span><br></pre></td></tr></table></figure><p>可以通过 <em>in</em> 来查看关键字是否在字典中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">joel_has_grade = <span class="string">"Joel"</span> <span class="keyword">in</span> grades     <span class="comment"># True</span></span><br><span class="line">kate_has_grade = <span class="string">"Kate"</span> <span class="keyword">in</span> grades     <span class="comment"># False</span></span><br></pre></td></tr></table></figure><p>字典有一个可以返回默认值的方法，当要查找的关键字不在字典中将会返回设定的默认值（而不是发生异常）:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">joels_grade = grades.get(<span class="string">"Joel"</span>, <span class="number">0</span>)   <span class="comment"># 等于 80</span></span><br><span class="line">kates_grade = grades.get(<span class="string">"Kate"</span>, <span class="number">0</span>)   <span class="comment"># 等于 0</span></span><br><span class="line">no_ones_grade = grades.get(<span class="string">"No One"</span>)  <span class="comment"># 返回默认值 None</span></span><br></pre></td></tr></table></figure><h4 id="字典修改"><a href="#字典修改" class="headerlink" title="字典修改"></a>字典修改</h4><p>可以用方括号来创建、修改字典中的键值对:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grades[<span class="string">"Tim"</span>] = <span class="number">99</span>                    <span class="comment"># 替换旧的值</span></span><br><span class="line">grades[<span class="string">"Kate"</span>] = <span class="number">100</span>                  <span class="comment"># 增加一个键值对</span></span><br><span class="line">num_students = len(grades)            <span class="comment"># 等于 3</span></span><br></pre></td></tr></table></figure><p>我们将会经常像这样使用字典来表达数据的结构:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tweet = &#123;</span><br><span class="line">    <span class="string">"user"</span> : <span class="string">"joelgrus"</span>,</span><br><span class="line">    <span class="string">"text"</span> : <span class="string">"Data Science is Awesome"</span>,</span><br><span class="line">    <span class="string">"retweet_count"</span> : <span class="number">100</span>,</span><br><span class="line">    <span class="string">"hashtags"</span> : [<span class="string">"#data"</span>, <span class="string">"#science"</span>, <span class="string">"#datascience"</span>, <span class="string">"#awesome"</span>, <span class="string">"#yolo"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了查找特定关键字，我们还可以像这样操作所有关键字:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tweet_keys = tweet.keys()             <span class="comment"># 得到一个关键字（键）列表</span></span><br><span class="line">tweet_values = tweet.values()         <span class="comment"># 得到值列表</span></span><br><span class="line">tweet_items = tweet.items()           <span class="comment"># 得到 (键, 值) 元组</span></span><br><span class="line"><span class="string">"user"</span> <span class="keyword">in</span> tweet_keys                  <span class="comment"># 返回 True, 用的是列表效率较低中的 in 查找</span></span><br><span class="line"><span class="string">"user"</span> <span class="keyword">in</span> tweet                       <span class="comment"># 更 Python 的用法, 用的是高效的字典中的 in 查找</span></span><br><span class="line"><span class="string">"joelgrus"</span> <span class="keyword">in</span> tweet_values            <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p>字典中的键是唯一的，而且列表不能用作字典的关键字（键）。如果你需要一个多部分的关键字，你可以使用元组，或者通过某种途径将关键字转换成字符串。</p><h4 id="内置字典"><a href="#内置字典" class="headerlink" title="内置字典"></a>内置字典</h4><p>如果你正试图统计一个文档中每个词出现的频率，一个显然的做法是创建一个字典，词作为关键字，频率作为对应的值。然后遍历文档，遇到出现过的词就让字典对应键值自增 1 ，遇到未出现过的词就在字典中添加一个键值对:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">word_counts = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> document:</span><br><span class="line">    <span class="keyword">if</span> word <span class="keyword">in</span> word_counts:</span><br><span class="line">        word_counts[word] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        word_counts[word] = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>当然，你也可以像这样用“先斩后奏”的方式来提前处理一个缺失的键:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">word_counts = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> document:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        word_counts[word] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        word_counts[word] = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>第三个方法是使用 <em>get</em> ，这个方法对于缺失键的处理表现优异:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">word_counts = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> document:</span><br><span class="line">    previous_count = word_counts.get(word, <span class="number">0</span>)</span><br><span class="line">    word_counts[word] = previous_count + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>内置字典就跟普通字典一样，唯一的区别就是，当你试图在字典中查找一个不存在的键时，内置字典将利用你提供的关键字自动创建一个键值对。为了使用内置字典，你需要导入 <em>collections</em> 函数库:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">word_counts = defaultdict(int)        <span class="comment"># int() 生成 0</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> document:</span><br><span class="line">    word_counts[word] += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>在列表、普通字典甚至自定义的函数中，默认字典也都很好用:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dd_list = defaultdict(list)           <span class="comment"># list() 生成一个空列表</span></span><br><span class="line">dd_list[<span class="number">2</span>].append(<span class="number">1</span>)                  <span class="comment"># 当前 dd_list 为 &#123;2: [1]&#125;</span></span><br><span class="line">dd_dict = defaultdict(dict)           <span class="comment"># dict() 生成一个空字典</span></span><br><span class="line">dd_dict[<span class="string">"Joel"</span>][<span class="string">"City"</span>] = <span class="string">"Seattle"</span>   <span class="comment"># 当前 dd_dict 内容为 &#123; "Joel" : &#123; "City" : Seattle"&#125;&#125;</span></span><br><span class="line">dd_pair = defaultdict(<span class="keyword">lambda</span>: [<span class="number">0</span>, <span class="number">0</span>]) <span class="comment"># 创建了一个关键字对于的值为列表的字典</span></span><br><span class="line">dd_pair[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>                     <span class="comment"># 当前 dd_pair 内容为 &#123;2: [0,1]&#125;</span></span><br></pre></td></tr></table></figure><p>这种方法很有用，以后我们要获取字典中的某些键值结果时，就无需再检查键是否存在了。</p><h3 id="计数器-Counter"><a href="#计数器-Counter" class="headerlink" title="计数器 Counter"></a>计数器 Counter</h3><p>计数器可以直接将一组值转换成类似字典的对象，关键字为这组中的某个元素，对应的值为该元素出现的次数。这在创建直方图的时候会经常用到:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">c = Counter([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>]) <span class="comment"># c (差不多)为 &#123; 0 : 2, 1 : 1, 2 : 1 &#125;</span></span><br></pre></td></tr></table></figure><p>这样我们就有了一个很方便的统计词频的方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">word_counts = Counter(document)</span><br></pre></td></tr></table></figure><p>计数器还有一个很常用的方法  _most_common_，可以直接得到最高频的几个词和对应的频率:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出前 10 个最高频的词以及他们的计数值</span></span><br><span class="line"><span class="keyword">for</span> word, count <span class="keyword">in</span> word_counts.most_common(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">print</span> word, count</span><br></pre></td></tr></table></figure><h3 id="集合-Sets"><a href="#集合-Sets" class="headerlink" title="集合 Sets"></a>集合 Sets</h3><p>Python 中另一种数据结构是集合，集合是一组不同元素的收集。<br>可以这样创建一个集合并向其中添加元素:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = set()</span><br><span class="line">s.add(<span class="number">1</span>)          <span class="comment"># s 为 &#123; 1 &#125;</span></span><br><span class="line">s.add(<span class="number">2</span>)          <span class="comment"># s 为 &#123; 1, 2 &#125;</span></span><br><span class="line">s.add(<span class="number">2</span>)          <span class="comment"># s 为 &#123; 1, 2 &#125;</span></span><br><span class="line">x = len(s)        <span class="comment"># 等于 2</span></span><br><span class="line">y = <span class="number">2</span> <span class="keyword">in</span> s        <span class="comment"># 等于 True</span></span><br><span class="line">z = <span class="number">3</span> <span class="keyword">in</span> s        <span class="comment"># 等于 False</span></span><br></pre></td></tr></table></figure><p>使用集合的两大理由：</p><p>第一，集合中的 <em>in</em> 操作非常高效。当一个数据集中的元素数量非常庞大的时候，以集合的形式来查找元素显然比列表更加合适:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stopwords_list = [<span class="string">"a"</span>,<span class="string">"an"</span>,<span class="string">"at"</span>] + hundreds_of_other_words + [<span class="string">"yet"</span>, <span class="string">"you"</span>]</span><br><span class="line"><span class="string">"zip"</span> <span class="keyword">in</span> stopwords_list               <span class="comment"># 失败，需要去检查每个元素</span></span><br><span class="line">stopwords_set = set(stopwords_list)</span><br><span class="line"><span class="string">"zip"</span> <span class="keyword">in</span> stopwords_set                <span class="comment"># 查找成功，而且速度很快</span></span><br></pre></td></tr></table></figure><p>第二，用集合来获取一组数据中不同的元素非常方便:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">num_items = len(item_list)            <span class="comment"># 6</span></span><br><span class="line">item_set = set(item_list)             <span class="comment"># &#123;1, 2, 3&#125;</span></span><br><span class="line">num_distinct_items = len(item_set)    <span class="comment"># 3</span></span><br><span class="line">distinct_item_list = list(item_set)   <span class="comment"># [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>不过实际上，集合的使用频率还是没有字典和列表高。</p><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><p>在绝大多数编程语言中，你都可以像这样用 <em>if</em> 来表示条件分支:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">1</span> &gt; <span class="number">2</span>:</span><br><span class="line">    message = <span class="string">"if only 1 were greater than two…"</span></span><br><span class="line"><span class="keyword">elif</span> <span class="number">1</span> &gt; <span class="number">3</span>:</span><br><span class="line">    message = <span class="string">"elif stands for 'else if'"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    message = <span class="string">"when all else fails use else (if you want to)"</span></span><br></pre></td></tr></table></figure><p>你也可以像这样将条件分支语句写在一行中，但这很少用:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parity = <span class="string">"even"</span> <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="string">"odd"</span></span><br></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a><em>while</em> 循环</h4><p>Python 中的 <em>while</em> 循环:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">print</span> x, <span class="string">"is less than 10"</span></span><br><span class="line">    x += <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a><em>for</em> 循环</h4><p>更常用的是使用 <em>for-in</em> 循环:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">print</span> x, <span class="string">"is less than 10"</span></span><br></pre></td></tr></table></figure><p>更复杂的逻辑表达式可以使用 <em>continue</em> 和 <em>break</em> 语句:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">continue</span>          <span class="comment"># 直接进入下一轮循环</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">break</span>             <span class="comment"># 完全退出循环</span></span><br><span class="line">    <span class="keyword">print</span> x</span><br></pre></td></tr></table></figure><p>结果将会输出 0， 1， 2，和 4。</p><h3 id="真值-Truthiness"><a href="#真值-Truthiness" class="headerlink" title="真值 Truthiness"></a>真值 Truthiness</h3><p>Python 中的布尔变量 Booleans 用法和其他语言差不多，唯一的区别是首字母一定要大写:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">one_is_less_than_two = <span class="number">1</span> &lt; <span class="number">2</span>      <span class="comment"># 为 True</span></span><br><span class="line">true_equals_false = <span class="keyword">True</span> == <span class="keyword">False</span> <span class="comment"># 为 False</span></span><br></pre></td></tr></table></figure><p>Python 使用 <em>None</em> 来表示一个值不存在，类似其他语言中的 <em>null</em> :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="keyword">None</span></span><br><span class="line"><span class="keyword">print</span> x == <span class="keyword">None</span>        <span class="comment"># 输出 True, 不够优美</span></span><br><span class="line"><span class="keyword">print</span> x <span class="keyword">is</span> <span class="keyword">None</span>        <span class="comment"># 输出 True, 更优美</span></span><br></pre></td></tr></table></figure><p>Python 允许你用其他值代替布尔值，以下皆等价于“False”:</p><ul><li>False</li><li>None</li><li>[] (一个空列表)</li><li>{} (一个空字典)</li><li>“”</li><li>set()</li><li>0</li><li>0.0</li></ul><p>类似的也有很多“True”的等价值，这让你非常方便地判断空列表、空字符串以及空字典等等。</p><p>当然，如果你不能预见结果的话，可能会在使用过程中出错:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = some_function_that_returns_a_string()</span><br><span class="line"><span class="keyword">if</span> s:</span><br><span class="line">    first_char = s[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    first_char = <span class="string">""</span></span><br></pre></td></tr></table></figure><p>一个更简单的做法，该做法效果等同于上面的做法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">first_char = s <span class="keyword">and</span> s[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>如果第一个值为真，将返回第二个值，否则返回第一个值。</p><p>类似地，如果 x 可能是一个数字也可能为空，那么这样可以得到一个肯定为数字的 x :</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">safe_x = x <span class="keyword">or</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>Python 中还有一个 <em>all</em> 函数，在每个元素都为“True”时函数返回“True”。<em>any</em> 函数，只要有一个元素为“True”就返回“True”。比如对于一个每一个元素都为“真”的列表，<em>all</em> 函数将返回“True”，否则将返回“False”:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">all([<span class="keyword">True</span>, <span class="number">1</span>, &#123; <span class="number">3</span> &#125;])       <span class="comment"># True</span></span><br><span class="line">all([<span class="keyword">True</span>, <span class="number">1</span>, &#123;&#125;])          <span class="comment"># False, &#123;&#125; 等价于“False”</span></span><br><span class="line">any([<span class="keyword">True</span>, <span class="number">1</span>, &#123;&#125;])          <span class="comment"># True</span></span><br><span class="line">all([])                     <span class="comment"># True, 不存在一个等价于“False”的元素</span></span><br><span class="line">any([])                     <span class="comment"># False, 不存在一个等价于“True”的元素</span></span><br></pre></td></tr></table></figure><p><strong>进阶阅读:</strong><br><a href="http://lulalap.com/2018/11/09/python-tutorails-advanced-level/">数据科学中常用的 Python 语法(进阶)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天在看这本 &lt;em&gt;&lt;a href=&quot;https://book.douban.com/subject/26364377/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Data Science from Scrach&lt;/a&gt;&lt;/em&gt; ( &lt;a href=&quot;http://www.zhanjunlang.com/resources/tutorial/Data%20Science%20from%20Scratch%20First%20Principles%20with%20Python.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PDF地址&lt;/a&gt; )，是本不错的通俗易懂的数据科学入门书籍。其中一个章节介绍了一下 Python 的基础语法和数据科学常用的进阶语法，觉得介绍得不错，很简洁明了，所以将其翻译一下放在这里以作备忘。&lt;br&gt;&lt;a href=&quot;http://lulalap.com/2018/11/07/python-tutorails-basic-level/&quot;&gt;数据科学中常用的 Python 语法(基础)&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://lulalap.com/2018/11/09/python-tutorails-advanced-level/&quot;&gt;数据科学中常用的 Python 语法(进阶)&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="数据科学" scheme="http://lulalap.com/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="Python" scheme="http://lulalap.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>PAT B1002 写出这个数(C++)</title>
    <link href="http://lulalap.com/2018/11/07/PAT-B1002-cpp/"/>
    <id>http://lulalap.com/2018/11/07/PAT-B1002-cpp/</id>
    <published>2018-11-07T09:32:49.000Z</published>
    <updated>2018-11-11T13:18:08.991Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/"> PAT 甲级目录</a>  |  <a href="http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/"> PAT 乙级目录</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><a id="more"></a><p>读入一个正整数 $n$，计算其各位数字之和，用汉语拼音写出和的每一位数字。</p><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>每个测试输入包含 1 个测试用例，即给出自然数 $n$ 的值。这里保证 $n$ 小于 $10^{100}$ 。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>在一行内输出 $n$ 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1234567890987654321123456789</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yi san wu</span><br></pre></td></tr></table></figure><h4 id="易错点："><a href="#易错点：" class="headerlink" title="易错点："></a>易错点：</h4><ul><li>注意输出末尾没有空格</li><li>倒序输出</li></ul><h4 id="也许陌生的知识点"><a href="#也许陌生的知识点" class="headerlink" title="也许陌生的知识点"></a>也许陌生的知识点</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt; //C++的字符串头文件，和 C 中的 string.h 功能不一样</span></span></span><br><span class="line">getline(<span class="built_in">cin</span>, &lt;val&gt; ) <span class="comment">// 字符串输入，能输入一整行包含空格的字符串</span></span><br></pre></td></tr></table></figure><h4 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">string</span> str[] = &#123;<span class="string">"ling"</span>, <span class="string">"yi"</span>, <span class="string">"er"</span>, <span class="string">"san"</span>, <span class="string">"si"</span>, <span class="string">"wu"</span>, <span class="string">"liu"</span>, <span class="string">"qi"</span>, <span class="string">"ba"</span>, <span class="string">"jiu"</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> n = <span class="number">0</span>, num[<span class="number">101</span>] = &#123;<span class="number">0</span>&#125;, i = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">string</span> s;</span><br><span class="line">  getline(<span class="built_in">cin</span>, s); <span class="comment">// 输入字符串类型变量</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">    n += (<span class="keyword">int</span>)(s[i] - <span class="string">'0'</span>); <span class="comment">//字符转换为数字</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    num[i++] = n % <span class="number">10</span>;</span><br><span class="line">    n /= <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)&#123; <span class="comment">//倒序输出</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; str[num[j]];  <span class="comment">// 序号存放在num数组中</span></span><br><span class="line">    <span class="keyword">if</span>(j != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">" "</span>); <span class="comment">// 注意末尾没有空格</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/&quot;&gt; PAT 甲级目录&lt;/a&gt;  |  &lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/&quot;&gt; PAT 乙级目录&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;
    
    </summary>
    
      <category term="PAT题解" scheme="http://lulalap.com/categories/PAT%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="PAT" scheme="http://lulalap.com/tags/PAT/"/>
    
  </entry>
  
</feed>
