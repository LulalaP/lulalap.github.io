<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>未知的世界</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lulalap.com/"/>
  <updated>2018-11-09T12:36:04.294Z</updated>
  <id>http://lulalap.com/</id>
  
  <author>
    <name>Philo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据科学中 Python 的常用语法(基础)</title>
    <link href="http://lulalap.com/2018/11/07/python-tutorails-basic-level/"/>
    <id>http://lulalap.com/2018/11/07/python-tutorails-basic-level/</id>
    <published>2018-11-07T14:28:02.000Z</published>
    <updated>2018-11-09T12:36:04.294Z</updated>
    
    <content type="html"><![CDATA[<p>这两天在看这本 <em><a href="https://book.douban.com/subject/26364377/" target="_blank" rel="noopener">Data Science from Scrach</a></em> ( <a href="http://www.zhanjunlang.com/resources/tutorial/Data%20Science%20from%20Scratch%20First%20Principles%20with%20Python.pdf" target="_blank" rel="noopener">PDF地址</a> )，是本不错的通俗易懂的数据科学入门书籍。其中一个章节介绍了一下 Python 的基础语法和数据科学常用的进阶语法，觉得介绍得不错，很简洁明了，所以将其翻译一下放在这里以作备忘。<br><a id="more"></a><br>以下介绍的是 Python 2.7 的语法。</p><h3 id="空格格式"><a href="#空格格式" class="headerlink" title="空格格式"></a>空格格式</h3><p>许多语言使用括号来控制代码块，但 Python 用的是缩进：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]:</span><br><span class="line">    <span class="keyword">print</span> i           <span class="comment"># "for i"循环的第一行</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]:</span><br><span class="line">        <span class="keyword">print</span> j       <span class="comment"># "for j"循环的第一行</span></span><br><span class="line">        <span class="keyword">print</span> i + j   <span class="comment"># "for j"循环的最后一行</span></span><br><span class="line">    <span class="keyword">print</span> i           <span class="comment"># "for i"循环的最后一行</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"done looping"</span></span><br></pre></td></tr></table></figure></p><p>这使得 Python 的代码非常易于阅读，但也意味着你要时刻注意格式。括号里的空格将会被忽略，这在写长表达式时很有用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">long_winded_computation = (<span class="number">1</span> + <span class="number">2</span> + <span class="number">3</span> + <span class="number">4</span> + <span class="number">5</span> + <span class="number">6</span> + <span class="number">7</span> + <span class="number">8</span> + <span class="number">9</span> + <span class="number">10</span> + <span class="number">11</span> + <span class="number">12</span> + <span class="number">13</span> + <span class="number">14</span> + <span class="number">15</span> + <span class="number">16</span> + <span class="number">17</span> + <span class="number">18</span> + <span class="number">19</span> + <span class="number">20</span>)</span><br></pre></td></tr></table></figure></p><p>也使得代码变得好读：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list_of_lists = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line">easier_to_read_list_of_lists = [ [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">                                 [<span class="number">4</span> ,<span class="number">5</span> ,<span class="number">6</span> ],</span><br><span class="line">                                 [<span class="number">7</span> ,<span class="number">8</span> ,<span class="number">9</span> ] ]</span><br></pre></td></tr></table></figure></p><h3 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h3><p>可以用一个反斜杠来表示连接中断的两行（这种做法很少用）：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">two_plus_three = <span class="number">2</span> + \</span><br><span class="line">                 <span class="number">3</span></span><br></pre></td></tr></table></figure></p><h3 id="模块-Modules"><a href="#模块-Modules" class="headerlink" title="模块 Modules"></a>模块 Modules</h3><p>不论是 Python 自带的模块还是自己下载的第三方的模块，都需要需要通过手动导入才能使用。<br>1.简单地直接导入整个模块：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">my_regex = re.compile(<span class="string">"[0-9]+"</span>, re.I)</span><br></pre></td></tr></table></figure></p><p>这里导入的 <em>re</em> 模块是用于正则表达式的。导入模块后，可以直接将模块名字作为前缀（re.）来调用具体功能。<br>2.如果调入的模块名称已经在代码中被使用，可以将模块导入时映射到另一个名称中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re <span class="keyword">as</span> regex</span><br><span class="line">my_regex = regex.compile(<span class="string">"[0-9]+"</span>, regex.I)</span><br></pre></td></tr></table></figure></p><p>3.如果你很坏，你就可以将整个模块都导入到当前命名空间，这可能在不经意间覆盖你已经定义好的变量：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">match = <span class="number">10</span></span><br><span class="line"><span class="keyword">from</span> re <span class="keyword">import</span> *  <span class="comment"># re 模块中有一个 match 函数</span></span><br><span class="line"><span class="keyword">print</span> match       <span class="comment"># 输出 match 函数</span></span><br></pre></td></tr></table></figure></p><p>因为你是个好人，所以我相信你不会这么做的。</p><h3 id="四则运算-Arithmetic"><a href="#四则运算-Arithmetic" class="headerlink" title="四则运算 Arithmetic"></a>四则运算 Arithmetic</h3><p>Python 2.7 默认使用整除，所以 $ 5 / 2 = 2 $.但很多时候我们并不想要整除，所以可以导入这个模块：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br></pre></td></tr></table></figure></p><p>导入后，就有 $5 / 2 = 2.5$.<br>整除：$5 // 2 = 2$.</p><h3 id="函数-Functions"><a href="#函数-Functions" class="headerlink" title="函数 Functions"></a>函数 Functions</h3><h4 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h4><p>函数是能够接收 0 个或多个输入，并返回一定输出的一个规则。在 Python 中，我们用 <strong><em>def 函数名(参数)</em></strong> 定义一个函数:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="string">"""你可以在这里写一些关于函数功能的解释</span></span><br><span class="line"><span class="string">    比如，该函数将输入内容乘2"""</span></span><br><span class="line">    <span class="comment"># 这里可以写函数主体，记得缩进</span></span><br><span class="line">    <span class="keyword">return</span> x * <span class="number">2</span></span><br></pre></td></tr></table></figure></p><h4 id="函数使用"><a href="#函数使用" class="headerlink" title="函数使用"></a>函数使用</h4><p>在 Python 中，函数是最低等级的存在，这意味着我们可以将函数赋值给一个变量，也可以将它作为一个参数传递给其他变量：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply_to_one</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="string">"""调用函数 f 并将 1 作为函数参数"""</span></span><br><span class="line">    <span class="keyword">return</span> f(<span class="number">1</span>)</span><br><span class="line">my_double = double          <span class="comment"># double 指向上一节定义的函数</span></span><br><span class="line">x = apply_to_one(my_double) <span class="comment"># x 等于 2</span></span><br></pre></td></tr></table></figure></p><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>还可以通过 <em>lambda</em> 来创建匿名函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y = apply_to_one(<span class="keyword">lambda</span> x: x + <span class="number">4</span>)     <span class="comment"># 等于 5</span></span><br></pre></td></tr></table></figure></p><p>可以将 <em>lambda</em> 赋值给其他变量，但大多数人会建议你还是尽量使用 <em>def</em> ：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">another_double = <span class="keyword">lambda</span> x: <span class="number">2</span> * x      <span class="comment"># 不建议</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">another_double</span><span class="params">(x)</span>:</span> <span class="keyword">return</span> <span class="number">2</span> * x   <span class="comment"># 建议做法</span></span><br></pre></td></tr></table></figure></p><p>补充：</p><ul><li><em>lambda</em> 只是一个表达式，函数体比 <em>def</em> 简单很多。</li><li><em>lambda</em> 的主体是一个表达式，而不是一个代码块。仅仅能在 <em>lambda</em> 表达式中封装有限的逻辑进去。</li></ul><h4 id="函数参数传递"><a href="#函数参数传递" class="headerlink" title="函数参数传递"></a>函数参数传递</h4><p>函数参数可以定义默认值，函数表达式不加参数将使用默认值，加参数将传递指定值:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_print</span><span class="params">(message=<span class="string">"my default message"</span>)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> message</span><br><span class="line">my_print(<span class="string">"hello"</span>)     <span class="comment"># 输出 "hello"</span></span><br><span class="line">my_print()            <span class="comment"># 输出 "my default message"</span></span><br></pre></td></tr></table></figure></p><p>有时候直接通过参数名称来指定参数也很好用:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">subtract</span><span class="params">(a=<span class="number">0</span>, b=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a - b</span><br><span class="line">subtract(<span class="number">10</span>, <span class="number">5</span>)   <span class="comment"># 返回 5</span></span><br><span class="line">subtract(<span class="number">0</span>, <span class="number">5</span>)    <span class="comment"># 返回 -5</span></span><br><span class="line">subtract(b=<span class="number">5</span>)     <span class="comment"># 与上一个相同，返回 -5</span></span><br></pre></td></tr></table></figure></p><h3 id="字符串-Strings"><a href="#字符串-Strings" class="headerlink" title="字符串 Strings"></a>字符串 Strings</h3><p>可以使用单引号或双引号来创建字符串（引号一定要配对）:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">single_quoted_string = <span class="string">'data science'</span></span><br><span class="line">double_quoted_string = <span class="string">"data science"</span></span><br></pre></td></tr></table></figure></p><p>用反斜杠来表示转义字符，如:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tab_string = <span class="string">"\t"</span>      <span class="comment"># 表示制表符 tab</span></span><br><span class="line">len(tab_string)        <span class="comment"># 等于 1</span></span><br></pre></td></tr></table></figure></p><p>当你想要使用反斜杠本身 (用于 Windows 目录或者正则表达式), 可以通过使用原始字符串 r” “ 定义:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">not_tab_string = <span class="string">r"\t"</span> <span class="comment"># 表示字符 '\' 和 't'</span></span><br><span class="line">len(not_tab_string)    <span class="comment"># 等于 2</span></span><br></pre></td></tr></table></figure></p><p>利用三个双引号创建多行字符串:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">multi_line_string = <span class="string">"""这是第一行</span></span><br><span class="line"><span class="string">这是第二行</span></span><br><span class="line"><span class="string">这是第三行"""</span></span><br></pre></td></tr></table></figure></p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>当程序出错，Python 会发生一个 <em>异常(exception)</em>，我们不对其进行处理的话，程序将会终止执行。捕获异常可以用 try 和 except 语句：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="number">0</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"不能除以0"</span></span><br></pre></td></tr></table></figure></p><p>尽管在其他语言中，异常被看作是不好的现象，但在 Python 中，多处理异常将会使你的代码更加简洁干净。</p><h3 id="列表-Lists"><a href="#列表-Lists" class="headerlink" title="列表 Lists"></a>列表 Lists</h3><h4 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h4><p>列表是简单的有序集合，也是 Python 中最基础的数据结构 (类似其他语言中的数组，但列表具有一些额外的特性)。创建一个列表：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">integer_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">heterogeneous_list = [<span class="string">"string"</span>, <span class="number">0.1</span>, <span class="keyword">True</span>]</span><br><span class="line">list_of_lists = [ integer_list, heterogeneous_list, [] ]</span><br><span class="line">list_length = len(integer_list)   <span class="comment"># 等于 3</span></span><br><span class="line">list_sum = sum(integer_list)      <span class="comment"># 等于 6</span></span><br></pre></td></tr></table></figure></p><h4 id="访问列表中的值"><a href="#访问列表中的值" class="headerlink" title="访问列表中的值"></a>访问列表中的值</h4><p>你可以通过方括号索引列表中的值:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = range(<span class="number">10</span>)       <span class="comment"># 列表获得列表 x = [0, 1, ..., 9]</span></span><br><span class="line">zero = x[<span class="number">0</span>]         <span class="comment"># 等于 0, 列表序号从 0 开始</span></span><br><span class="line">one = x[<span class="number">1</span>]          <span class="comment"># 等于 1</span></span><br><span class="line">nine = x[<span class="number">-1</span>]        <span class="comment"># 等于 9, 列表中最后一个元素</span></span><br><span class="line">eight = x[<span class="number">-2</span>]       <span class="comment"># 等于 8, 列表中倒数第二个元素</span></span><br><span class="line">x[<span class="number">0</span>] = <span class="number">-1</span>           <span class="comment"># 当前列表 x = [-1, 1, 2, 3, ..., 9]</span></span><br></pre></td></tr></table></figure></p><h4 id="截取列表"><a href="#截取列表" class="headerlink" title="截取列表"></a>截取列表</h4><p>还可以用方括号截取列表:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">first_three = x[:<span class="number">3</span>]                  <span class="comment"># [-1, 1, 2]</span></span><br><span class="line">three_to_end = x[<span class="number">3</span>:]                 <span class="comment"># [3, 4, ..., 9]</span></span><br><span class="line">one_to_four = x[<span class="number">1</span>:<span class="number">5</span>]                 <span class="comment"># [1, 2, 3, 4]</span></span><br><span class="line">last_three = x[<span class="number">-3</span>:]                  <span class="comment"># [7, 8, 9]</span></span><br><span class="line">without_first_and_last = x[<span class="number">1</span>:<span class="number">-1</span>]     <span class="comment"># [1, 2, ..., 8]</span></span><br><span class="line">copy_of_x = x[:]                     <span class="comment"># [-1, 1, 2, ..., 9]</span></span><br></pre></td></tr></table></figure></p><p>可以用 <em>in</em> 来查看某元素是否在列表中:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]        <span class="comment"># True</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]        <span class="comment"># False</span></span><br></pre></td></tr></table></figure></p><p>这种元素查找方式效率很低，只有在列表很小或者你不在意查找时间的情况下再去使用。</p><h4 id="拼接列表"><a href="#拼接列表" class="headerlink" title="拼接列表"></a>拼接列表</h4><p>Python 中很容易就能拼接两个列表:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">x.extend([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])   <span class="comment"># 当前 x = [1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure></p><p>如果你不想修改原列表 x ，你可以使用“加”运算符创建一个新的列表:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">y = x + [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]     <span class="comment"># 当前 y = [1, 2, 3, 4, 5, 6]; x 没有变化</span></span><br></pre></td></tr></table></figure></p><p>经常用这样的方式一次在列表中添加一个元素:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">x.append(<span class="number">0</span>)           <span class="comment"># 当前 x = [1, 2, 3, 0]</span></span><br><span class="line">y = x[<span class="number">-1</span>]             <span class="comment"># 等于 0</span></span><br><span class="line">z = len(x)            <span class="comment"># 等于 4</span></span><br></pre></td></tr></table></figure></p><h4 id="列表分解"><a href="#列表分解" class="headerlink" title="列表分解"></a>列表分解</h4><p>如果你知道列表中有多少个元素，那么很容易就能分解这个列表:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x, y = [<span class="number">1</span>, <span class="number">2</span>]         <span class="comment"># 当前 x = 1, y = 2</span></span><br></pre></td></tr></table></figure></p><p>等式两边元素数目不一致的话，你将会得到一个 <em>值错误</em>，所以我们更经常用下划线来存放列表剩下的部分:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_, y = [<span class="number">1</span>, <span class="number">2</span>]         <span class="comment"># 当前 y == 2, 不管第一个元素</span></span><br></pre></td></tr></table></figure></p><h3 id="元组-Tuples"><a href="#元组-Tuples" class="headerlink" title="元组 Tuples"></a>元组 Tuples</h3><p>列表和元组很像，和列表唯一的区别就是，元组中的元素不能被修改。</p><h4 id="元组创建"><a href="#元组创建" class="headerlink" title="元组创建"></a>元组创建</h4><p>可以使用圆括号或者不加任何括号来创建元组:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">my_tuple = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">other_tuple = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line">my_list[<span class="number">1</span>] = <span class="number">3</span>        <span class="comment"># 当前 my_list 为 [1, 3]</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    my_tuple[<span class="number">1</span>] = <span class="number">3</span></span><br><span class="line"><span class="keyword">except</span> TypeError:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"无法修改元组"</span></span><br></pre></td></tr></table></figure></p><p>利用元组能够很方便地从函数中获取多个返回值:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_and_product</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (x + y),(x * y)</span><br><span class="line">sp = sum_and_product(<span class="number">2</span>, <span class="number">3</span>)    <span class="comment"># 等于 (5, 6)</span></span><br><span class="line">s, p = sum_and_product(<span class="number">5</span>, <span class="number">10</span>) <span class="comment"># s = 15, p = 50</span></span><br></pre></td></tr></table></figure></p><p>元组（和列表）都支持同时赋值多个元素:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x, y = <span class="number">1</span>, <span class="number">2</span>       <span class="comment"># 当前 x = 1, y = 2</span></span><br><span class="line">x, y = y, x       <span class="comment"># Python 中交换两个变量的值; 当前 x = 2, y = 1</span></span><br></pre></td></tr></table></figure></p><h3 id="字典-Dictionaries"><a href="#字典-Dictionaries" class="headerlink" title="字典 Dictionaries"></a>字典 Dictionaries</h3><h4 id="字典创建"><a href="#字典创建" class="headerlink" title="字典创建"></a>字典创建</h4><p>Python 中的另一个基础数据结构是字典，它能让你通过关键字（key）快速获得对应的值（value）:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">empty_dict = &#123;&#125;                       <span class="comment"># 非常 Python 化的空字典定义</span></span><br><span class="line">empty_dict2 = dict()                  <span class="comment"># 没那么 Python 化的空字典定义</span></span><br><span class="line">grades = &#123; <span class="string">"Joel"</span> : <span class="number">80</span>, <span class="string">"Tim"</span> : <span class="number">95</span> &#125;  <span class="comment"># 字典存储</span></span><br></pre></td></tr></table></figure></p><h4 id="字典元素查找"><a href="#字典元素查找" class="headerlink" title="字典元素查找"></a>字典元素查找</h4><p>你可以用方括号加关键字来查找对应的值:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">joels_grade = grades[<span class="string">"Joel"</span>]          <span class="comment"># 等于 80</span></span><br></pre></td></tr></table></figure></p><p>如果要查找的关键字不在字典中，将返回一个 <em>键错误(KeyError)</em> :<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    kates_grade = grades[<span class="string">"Kate"</span>]</span><br><span class="line"><span class="keyword">except</span> KeyError:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"no grade for Kate!"</span></span><br></pre></td></tr></table></figure></p><p>可以通过 <em>in</em> 来查看关键字是否在字典中:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">joel_has_grade = <span class="string">"Joel"</span> <span class="keyword">in</span> grades     <span class="comment"># True</span></span><br><span class="line">kate_has_grade = <span class="string">"Kate"</span> <span class="keyword">in</span> grades     <span class="comment"># False</span></span><br></pre></td></tr></table></figure></p><p>字典有一个可以返回默认值的方法，当要查找的关键字不在字典中将会返回设定的默认值（而不是发生异常）:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">joels_grade = grades.get(<span class="string">"Joel"</span>, <span class="number">0</span>)   <span class="comment"># 等于 80</span></span><br><span class="line">kates_grade = grades.get(<span class="string">"Kate"</span>, <span class="number">0</span>)   <span class="comment"># 等于 0</span></span><br><span class="line">no_ones_grade = grades.get(<span class="string">"No One"</span>)  <span class="comment"># 返回默认值 None</span></span><br></pre></td></tr></table></figure><h4 id="字典修改"><a href="#字典修改" class="headerlink" title="字典修改"></a>字典修改</h4><p>可以用方括号来创建、修改字典中的键值对:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grades[<span class="string">"Tim"</span>] = <span class="number">99</span>                    <span class="comment"># 替换旧的值</span></span><br><span class="line">grades[<span class="string">"Kate"</span>] = <span class="number">100</span>                  <span class="comment"># 增加一个键值对</span></span><br><span class="line">num_students = len(grades)            <span class="comment"># 等于 3</span></span><br></pre></td></tr></table></figure></p><p>我们将会经常像这样使用字典来表达数据的结构:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tweet = &#123;</span><br><span class="line">    <span class="string">"user"</span> : <span class="string">"joelgrus"</span>,</span><br><span class="line">    <span class="string">"text"</span> : <span class="string">"Data Science is Awesome"</span>,</span><br><span class="line">    <span class="string">"retweet_count"</span> : <span class="number">100</span>,</span><br><span class="line">    <span class="string">"hashtags"</span> : [<span class="string">"#data"</span>, <span class="string">"#science"</span>, <span class="string">"#datascience"</span>, <span class="string">"#awesome"</span>, <span class="string">"#yolo"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>除了查找特定关键字，我们还可以像这样操作所有关键字:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tweet_keys = tweet.keys()             <span class="comment"># 得到一个关键字（键）列表</span></span><br><span class="line">tweet_values = tweet.values()         <span class="comment"># 得到值列表</span></span><br><span class="line">tweet_items = tweet.items()           <span class="comment"># 得到 (键, 值) 元组</span></span><br><span class="line"><span class="string">"user"</span> <span class="keyword">in</span> tweet_keys                  <span class="comment"># 返回 True, 用的是列表效率较低中的 in 查找</span></span><br><span class="line"><span class="string">"user"</span> <span class="keyword">in</span> tweet                       <span class="comment"># 更 Python 的用法, 用的是高效的字典中的 in 查找</span></span><br><span class="line"><span class="string">"joelgrus"</span> <span class="keyword">in</span> tweet_values            <span class="comment"># True</span></span><br></pre></td></tr></table></figure></p><p>字典中的键是唯一的，而且列表不能用作字典的关键字（键）。如果你需要一个多部分的关键字，你可以使用元组，或者通过某种途径将关键字转换成字符串。</p><h4 id="内置字典"><a href="#内置字典" class="headerlink" title="内置字典"></a>内置字典</h4><p>如果你正试图统计一个文档中每个词出现的频率，一个显然的做法是创建一个字典，词作为关键字，频率作为对应的值。然后遍历文档，遇到出现过的词就让字典对应键值自增 1 ，遇到未出现过的词就在字典中添加一个键值对:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">word_counts = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> document:</span><br><span class="line">    <span class="keyword">if</span> word <span class="keyword">in</span> word_counts:</span><br><span class="line">        word_counts[word] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        word_counts[word] = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>当然，你也可以像这样用“先斩后奏”的方式来提前处理一个缺失的键:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">word_counts = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> document:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        word_counts[word] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        word_counts[word] = <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>第三个方法是使用 <em>get</em> ，这个方法对于缺失键的处理表现优异:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">word_counts = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> document:</span><br><span class="line">    previous_count = word_counts.get(word, <span class="number">0</span>)</span><br><span class="line">    word_counts[word] = previous_count + <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>内置字典就跟普通字典一样，唯一的区别就是，当你试图在字典中查找一个不存在的键时，内置字典将利用你提供的关键字自动创建一个键值对。为了使用内置字典，你需要导入 <em>collections</em> 函数库:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">word_counts = defaultdict(int)        <span class="comment"># int() 生成 0</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> document:</span><br><span class="line">    word_counts[word] += <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>在列表、普通字典甚至自定义的函数中，默认字典也都很好用:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dd_list = defaultdict(list)           <span class="comment"># list() 生成一个空列表</span></span><br><span class="line">dd_list[<span class="number">2</span>].append(<span class="number">1</span>)                  <span class="comment"># 当前 dd_list 为 &#123;2: [1]&#125;</span></span><br><span class="line">dd_dict = defaultdict(dict)           <span class="comment"># dict() 生成一个空字典</span></span><br><span class="line">dd_dict[<span class="string">"Joel"</span>][<span class="string">"City"</span>] = <span class="string">"Seattle"</span>   <span class="comment"># 当前 dd_dict 内容为 &#123; "Joel" : &#123; "City" : Seattle"&#125;&#125;</span></span><br><span class="line">dd_pair = defaultdict(<span class="keyword">lambda</span>: [<span class="number">0</span>, <span class="number">0</span>]) <span class="comment"># 创建了一个关键字对于的值为列表的字典</span></span><br><span class="line">dd_pair[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">1</span>                     <span class="comment"># 当前 dd_pair 内容为 &#123;2: [0,1]&#125;</span></span><br></pre></td></tr></table></figure></p><p>这种方法很有用，以后我们要获取字典中的某些键值结果时，就无需再检查键是否存在了。</p><h3 id="计数器-Counter"><a href="#计数器-Counter" class="headerlink" title="计数器 Counter"></a>计数器 Counter</h3><p>计数器可以直接将一组值转换成类似字典的对象，关键字为这组中的某个元素，对应的值为该元素出现的次数。这在创建直方图的时候会经常用到:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line">c = Counter([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>]) <span class="comment"># c (差不多)为 &#123; 0 : 2, 1 : 1, 2 : 1 &#125;</span></span><br></pre></td></tr></table></figure></p><p>这样我们就有了一个很方便的统计词频的方法:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">word_counts = Counter(document)</span><br></pre></td></tr></table></figure></p><p>计数器还有一个很常用的方法  _most_common_，可以直接得到最高频的几个词和对应的频率:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出前 10 个最高频的词以及他们的计数值</span></span><br><span class="line"><span class="keyword">for</span> word, count <span class="keyword">in</span> word_counts.most_common(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">print</span> word, count</span><br></pre></td></tr></table></figure></p><h3 id="集合-Sets"><a href="#集合-Sets" class="headerlink" title="集合 Sets"></a>集合 Sets</h3><p>Python 中另一种数据结构是集合，集合是一组不同元素的收集。<br>可以这样创建一个集合并向其中添加元素:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s = set()</span><br><span class="line">s.add(<span class="number">1</span>)          <span class="comment"># s 为 &#123; 1 &#125;</span></span><br><span class="line">s.add(<span class="number">2</span>)          <span class="comment"># s 为 &#123; 1, 2 &#125;</span></span><br><span class="line">s.add(<span class="number">2</span>)          <span class="comment"># s 为 &#123; 1, 2 &#125;</span></span><br><span class="line">x = len(s)        <span class="comment"># 等于 2</span></span><br><span class="line">y = <span class="number">2</span> <span class="keyword">in</span> s        <span class="comment"># 等于 True</span></span><br><span class="line">z = <span class="number">3</span> <span class="keyword">in</span> s        <span class="comment"># 等于 False</span></span><br></pre></td></tr></table></figure></p><p>使用集合的两大理由：<br>第一，集合中的 <em>in</em> 操作非常高效。<br>当一个数据集中的元素数量非常庞大的时候，以集合的形式来查找元素显然比列表更加合适:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stopwords_list = [<span class="string">"a"</span>,<span class="string">"an"</span>,<span class="string">"at"</span>] + hundreds_of_other_words + [<span class="string">"yet"</span>, <span class="string">"you"</span>]</span><br><span class="line"><span class="string">"zip"</span> <span class="keyword">in</span> stopwords_list               <span class="comment"># 失败，需要去检查每个元素</span></span><br><span class="line">stopwords_set = set(stopwords_list)</span><br><span class="line"><span class="string">"zip"</span> <span class="keyword">in</span> stopwords_set                <span class="comment"># 查找成功，而且速度很快</span></span><br></pre></td></tr></table></figure></p><p>第二，用集合来获取一组数据中不同的元素非常方便:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">num_items = len(item_list)            <span class="comment"># 6</span></span><br><span class="line">item_set = set(item_list)             <span class="comment"># &#123;1, 2, 3&#125;</span></span><br><span class="line">num_distinct_items = len(item_set)    <span class="comment"># 3</span></span><br><span class="line">distinct_item_list = list(item_set)   <span class="comment"># [1, 2, 3]</span></span><br></pre></td></tr></table></figure></p><p>不过实际上，集合的使用频率还是没有字典和列表高。</p><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><p>在绝大多数编程语言中，你都可以像这样用 <em>if</em> 来表示条件分支:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">1</span> &gt; <span class="number">2</span>:</span><br><span class="line">    message = <span class="string">"if only 1 were greater than two…"</span></span><br><span class="line"><span class="keyword">elif</span> <span class="number">1</span> &gt; <span class="number">3</span>:</span><br><span class="line">    message = <span class="string">"elif stands for 'else if'"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    message = <span class="string">"when all else fails use else (if you want to)"</span></span><br></pre></td></tr></table></figure></p><p>你也可以像这样将条件分支语句写在一行中，但这很少用:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parity = <span class="string">"even"</span> <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="string">"odd"</span></span><br></pre></td></tr></table></figure></p><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a><em>while</em> 循环</h4><p>Python 中的 <em>while</em> 循环:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">print</span> x, <span class="string">"is less than 10"</span></span><br><span class="line">    x += <span class="number">1</span></span><br></pre></td></tr></table></figure></p><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a><em>for</em> 循环</h4><p>更常用的是使用 <em>for-in</em> 循环:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">print</span> x, <span class="string">"is less than 10"</span></span><br></pre></td></tr></table></figure></p><p>更复杂的逻辑表达式可以使用 <em>continue</em> 和 <em>break</em> 语句:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">continue</span>          <span class="comment"># 直接进入下一轮循环</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">break</span>             <span class="comment"># 完全退出循环</span></span><br><span class="line">    <span class="keyword">print</span> x</span><br></pre></td></tr></table></figure></p><p>结果将会输出 0， 1， 2，和 4。</p><h3 id="真值-Truthiness"><a href="#真值-Truthiness" class="headerlink" title="真值 Truthiness"></a>真值 Truthiness</h3><p>Python 中的布尔变量 Booleans 用法和其他语言差不多，唯一的区别是首字母一定要大写:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">one_is_less_than_two = <span class="number">1</span> &lt; <span class="number">2</span>      <span class="comment"># 为 True</span></span><br><span class="line">true_equals_false = <span class="keyword">True</span> == <span class="keyword">False</span> <span class="comment"># 为 False</span></span><br></pre></td></tr></table></figure></p><p>Python 使用 <em>None</em> 来表示一个值不存在，类似其他语言中的 <em>null</em> :<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="keyword">None</span></span><br><span class="line"><span class="keyword">print</span> x == <span class="keyword">None</span>        <span class="comment"># 输出 True, 非 Python 中的惯用做法</span></span><br><span class="line"><span class="keyword">print</span> x <span class="keyword">is</span> <span class="keyword">None</span>        <span class="comment"># 输出 True, Python 中的惯用做法</span></span><br></pre></td></tr></table></figure></p><p>Python 允许你用其他值代替布尔值，以下皆等价于”假“或”“False”:</p><ul><li>False</li><li>None</li><li>[] (一个空列表)</li><li>{} (一个空字典)</li><li>“”</li><li>set()</li><li>0</li><li>0.0</li></ul><p>类似的也有很多“True”的等价值，这让你非常方便地判断空列表、空字符串以及空字典等等。<br>当然，如果你不能预见结果的话，可能会在使用过程中出错:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = some_function_that_returns_a_string()</span><br><span class="line"><span class="keyword">if</span> s:</span><br><span class="line">    first_char = s[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    first_char = <span class="string">""</span></span><br></pre></td></tr></table></figure></p><p>一个更简单的做法，该做法效果等同于上面的做法:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">first_char = s <span class="keyword">and</span> s[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></p><p>如果第一个值为真，将返回第二个值，否则返回第一个值。<br>类似地，如果 x 可能是一个数字也可能为空，那么这样可以得到一个肯定为数字的 x :<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">safe_x = x <span class="keyword">or</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>Python 中还有一个 <em>all</em> 函数，在每个元素都为“True”时函数返回“True”。<em>any</em> 函数，只要有一个元素为“True”就返回“True”。比如对于一个每一个元素都为“真”的列表，<em>all</em> 函数将返回“True”，否则将返回“False”:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">all([<span class="keyword">True</span>, <span class="number">1</span>, &#123; <span class="number">3</span> &#125;])       <span class="comment"># True</span></span><br><span class="line">all([<span class="keyword">True</span>, <span class="number">1</span>, &#123;&#125;])          <span class="comment"># False, &#123;&#125; 等价于“False”</span></span><br><span class="line">any([<span class="keyword">True</span>, <span class="number">1</span>, &#123;&#125;])          <span class="comment"># True</span></span><br><span class="line">all([])                     <span class="comment"># True, 不存在一个等价于“False”的元素</span></span><br><span class="line">any([])                     <span class="comment"># False, 不存在一个等价于“True”的元素</span></span><br></pre></td></tr></table></figure></p><p><strong>进阶阅读:</strong><br><a href="http://lulalap.com/python-tutorails-advanced-level/">数据科学中 Python 的常用语法(进阶)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这两天在看这本 &lt;em&gt;&lt;a href=&quot;https://book.douban.com/subject/26364377/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Data Science from Scrach&lt;/a&gt;&lt;/em&gt; ( &lt;a href=&quot;http://www.zhanjunlang.com/resources/tutorial/Data%20Science%20from%20Scratch%20First%20Principles%20with%20Python.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PDF地址&lt;/a&gt; )，是本不错的通俗易懂的数据科学入门书籍。其中一个章节介绍了一下 Python 的基础语法和数据科学常用的进阶语法，觉得介绍得不错，很简洁明了，所以将其翻译一下放在这里以作备忘。&lt;br&gt;
    
    </summary>
    
      <category term="数据科学" scheme="http://lulalap.com/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    
      <category term="Python" scheme="http://lulalap.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>PAT B1002 写出这个数(Cpp)</title>
    <link href="http://lulalap.com/2018/11/07/PAT-B1002-cpp/"/>
    <id>http://lulalap.com/2018/11/07/PAT-B1002-cpp/</id>
    <published>2018-11-07T09:32:49.000Z</published>
    <updated>2018-11-09T12:15:59.349Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/"> PAT 甲级目录</a>  |  <a href="http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/"> PAT 乙级目录</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><a id="more"></a><p>读入一个正整数 $n$，计算其各位数字之和，用汉语拼音写出和的每一位数字。</p><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>每个测试输入包含 1 个测试用例，即给出自然数 $n$ 的值。这里保证 $n$ 小于 $10^{100}$ 。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>在一行内输出 $n$ 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1234567890987654321123456789</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yi san wu</span><br></pre></td></tr></table></figure><h4 id="易错点："><a href="#易错点：" class="headerlink" title="易错点："></a>易错点：</h4><ul><li>注意输出末尾没有空格</li><li>倒序输出</li></ul><h4 id="也许陌生的知识点"><a href="#也许陌生的知识点" class="headerlink" title="也许陌生的知识点"></a>也许陌生的知识点</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt; //C++的字符串头文件，和 C 中的 string.h 功能不一样</span></span></span><br><span class="line">getline(<span class="built_in">cin</span>, &lt;val&gt; ) <span class="comment">// 字符串输入，能输入一整行包含空格的字符串</span></span><br></pre></td></tr></table></figure><p>代码示例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">string</span> str[] = &#123;<span class="string">"ling"</span>, <span class="string">"yi"</span>, <span class="string">"er"</span>, <span class="string">"san"</span>, <span class="string">"si"</span>, <span class="string">"wu"</span>, <span class="string">"liu"</span>, <span class="string">"qi"</span>, <span class="string">"ba"</span>, <span class="string">"jiu"</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> n = <span class="number">0</span>, num[<span class="number">101</span>] = &#123;<span class="number">0</span>&#125;, i = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">string</span> s;</span><br><span class="line">  getline(<span class="built_in">cin</span>, s); <span class="comment">// 输入字符串类型变量</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">    n += (<span class="keyword">int</span>)(s[i] - <span class="string">'0'</span>); <span class="comment">//字符转换为数字</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span>(n &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    num[i++] = n % <span class="number">10</span>;</span><br><span class="line">    n /= <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)&#123; <span class="comment">//倒序输出</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; str[num[j]];  <span class="comment">// 序号存放在num数组中</span></span><br><span class="line">    <span class="keyword">if</span>(j != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">" "</span>); <span class="comment">// 注意末尾没有空格</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/&quot;&gt; PAT 甲级目录&lt;/a&gt;  |  &lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/&quot;&gt; PAT 乙级目录&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PAT B1001 害死人不偿命的(3n+1)猜想(Python)</title>
    <link href="http://lulalap.com/2018/11/07/PAT-B1001-py/"/>
    <id>http://lulalap.com/2018/11/07/PAT-B1001-py/</id>
    <published>2018-11-07T08:23:30.000Z</published>
    <updated>2018-11-07T08:31:09.707Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/"> PAT 甲级目录</a>  |  <a href="http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/"> PAT 乙级目录</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>卡拉兹(Callatz)猜想：<br><a id="more"></a><br>对任何一个正整数 $n$，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 $(3n+1)$ 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 $n=1$。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 $(3n+1)$，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……<br>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 $1000$ 的正整数 $n$，简单地数一下，需要多少步（砍几下）才能得到 $n=1$？</p><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>每个测试输入包含 1 个测试用例，即给出正整数 $n$ 的值。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>输出从 $n$ 计算到 1 需要的步数。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p>代码示例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n = int(input()) <span class="comment"># 默认输入为字符串，这里将类型转换成整型</span></span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span>):</span><br><span class="line">        n /= <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        n = (<span class="number">3</span> * n + <span class="number">1</span>) / <span class="number">2</span></span><br><span class="line">    cnt = cnt + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(cnt)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/&quot;&gt; PAT 甲级目录&lt;/a&gt;  |  &lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/&quot;&gt; PAT 乙级目录&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;卡拉兹(Callatz)猜想：&lt;br&gt;
    
    </summary>
    
      <category term="PAT题解" scheme="http://lulalap.com/categories/PAT%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="PAT" scheme="http://lulalap.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT甲级目录（更新中）</title>
    <link href="http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/"/>
    <id>http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/</id>
    <published>2018-11-07T06:50:39.000Z</published>
    <updated>2018-11-07T08:25:55.553Z</updated>
    
    <content type="html"><![CDATA[<p>力求用最简洁明了的方式给出题解，并附上也许对新手陌生的知识点以及题目易错点等，如果能帮到你的话那就太棒啦~</p><p><a href="http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/"> PAT 甲级目录</a>  |  <a href="http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/"> PAT 乙级目录</a></p><a id="more"></a><table><thead><tr><th>题目编号</th><th>C++版本</th><th>Python版本</th></tr></thead><tbody><tr><td>PAT_B1001</td><td><a href="http://lulalap.com/2018/11/07/PAT-B1001-cpp/">Cpp</a></td><td><a href="http://lulalap.com/2018/11/07/PAT-B1001-py/">Py</a></td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;力求用最简洁明了的方式给出题解，并附上也许对新手陌生的知识点以及题目易错点等，如果能帮到你的话那就太棒啦~&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/&quot;&gt; PAT 甲级目录&lt;/a&gt;  |  &lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/&quot;&gt; PAT 乙级目录&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>AttributeError:&#39;NoneType&#39; object has no attribute &#39;find_all&#39;</title>
    <link href="http://lulalap.com/2018/11/07/AttributeError-NoneType-object-has-no-attribute-find-all/"/>
    <id>http://lulalap.com/2018/11/07/AttributeError-NoneType-object-has-no-attribute-find-all/</id>
    <published>2018-11-07T06:42:04.000Z</published>
    <updated>2018-11-07T06:53:46.824Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>当像这样使用 BeautifulSoup 时，会遇到报错信息：<strong> AttributeError: ‘NoneType’ object has no attribute ‘find_all’ </strong><br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">soup = BeautifulSoup(html,features=<span class="string">'lxml'</span>)</span><br><span class="line">content = soup.find(<span class="string">'article'</span>, &#123;<span class="string">"class"</span>:<span class="string">'post post-type-normal'</span>&#125;)</span><br><span class="line">d_body = content.find_all(<span class="string">'li'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>查了很多博客，但是都没说到点上，最后找到了。其实是 soup.find() 里的参数不对，没有匹配到任何信息，导致上一步得到的 content 是空的，因此后面会报错。调整了一下参数，完美运行。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; class=&quot;headerlink&quot; title=&quot;问题描述：&quot;&gt;&lt;/a&gt;问题描述：&lt;/h3&gt;&lt;p&gt;当像这样使用 BeautifulSoup 时，会遇到报错信息：&lt;strong&gt; AttributeError: ‘NoneType’ object has no attribute ‘find_all’ &lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="日常折腾" scheme="http://lulalap.com/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="爬虫" scheme="http://lulalap.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>PAT乙级目录（更新中）</title>
    <link href="http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/"/>
    <id>http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/</id>
    <published>2018-11-07T06:33:41.000Z</published>
    <updated>2018-11-07T09:39:55.762Z</updated>
    
    <content type="html"><![CDATA[<p>力求用最简洁明了的方式给出题解，并附上也许对新手陌生的知识点以及题目易错点等，如果能帮到你的话那就太棒啦~</p><p><a href="http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/"> PAT 甲级目录</a>  |  <a href="http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/"> PAT 乙级目录</a></p><a id="more"></a><table><thead><tr><th>题目编号</th><th>C++版本</th><th>Python版本</th></tr></thead><tbody><tr><td>PAT_B1001</td><td><a href="http://lulalap.com/2018/11/07/PAT-B1001-cpp/">Cpp</a></td><td><a href="http://lulalap.com/2018/11/07/PAT-B1001-py/">Py</a></td><td></td></tr><tr><td>PAT_B1002</td><td><a href="http://lulalap.com/2018/11/07/PAT-B1002-cpp/">Cpp</a></td><td></td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;力求用最简洁明了的方式给出题解，并附上也许对新手陌生的知识点以及题目易错点等，如果能帮到你的话那就太棒啦~&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/&quot;&gt; PAT 甲级目录&lt;/a&gt;  |  &lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/&quot;&gt; PAT 乙级目录&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PAT题解" scheme="http://lulalap.com/categories/PAT%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="PAT" scheme="http://lulalap.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>PAT B1001 害死人不偿命的(3n+1)猜想(Cpp)</title>
    <link href="http://lulalap.com/2018/11/07/PAT-B1001-cpp/"/>
    <id>http://lulalap.com/2018/11/07/PAT-B1001-cpp/</id>
    <published>2018-11-07T06:17:22.000Z</published>
    <updated>2018-11-07T08:25:20.345Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/"> PAT 甲级目录</a>  |  <a href="http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/"> PAT 乙级目录</a></p><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>卡拉兹(Callatz)猜想：<br><a id="more"></a><br>对任何一个正整数 $n$，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 $(3n+1)$ 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 $n=1$。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 $(3n+1)$，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……<br>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 $1000$ 的正整数 $n$，简单地数一下，需要多少步（砍几下）才能得到 $n=1$？</p><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h4><p>每个测试输入包含 1 个测试用例，即给出正整数 $n$ 的值。</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h4><p>输出从 $n$ 计算到 1 需要的步数。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><p>代码示例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; //C++标准输入输出头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; <span class="comment">//C++指定标准命名空间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n, cnt = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n; <span class="comment">//输入n</span></span><br><span class="line">  <span class="keyword">while</span>(n &gt; <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span>) n /= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span> n = (<span class="number">3</span> * n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    cnt ++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//输出cnt</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Advanced-Level/&quot;&gt; PAT 甲级目录&lt;/a&gt;  |  &lt;a href=&quot;http://lulalap.com/2018/11/07/index-of-PAT-Basic-Level/&quot;&gt; PAT 乙级目录&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h4&gt;&lt;p&gt;卡拉兹(Callatz)猜想：&lt;br&gt;
    
    </summary>
    
      <category term="PAT题解" scheme="http://lulalap.com/categories/PAT%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="PAT" scheme="http://lulalap.com/tags/PAT/"/>
    
  </entry>
  
  <entry>
    <title>我居然错过了考研正式报名</title>
    <link href="http://lulalap.com/2018/11/05/I-Missed-A-Important-Test/"/>
    <id>http://lulalap.com/2018/11/05/I-Missed-A-Important-Test/</id>
    <published>2018-11-05T12:53:13.000Z</published>
    <updated>2018-11-06T13:10:26.914Z</updated>
    
    <content type="html"><![CDATA[<p>预想过失败的很多种方式，但没想到的是，有一天我会栽到这里。<br><a id="more"></a></p><p>但更令我惊讶的还是，我居然一点也不难过，反而还有点开心。</p><p>这是真正自由的味道，在逃离大学这个牢笼之后。</p><h3 id="一战浙大计算机"><a href="#一战浙大计算机" class="headerlink" title="一战浙大计算机"></a>一战浙大计算机</h3><p>去年这时候，我刚刚结束长达两个月的平均每天 5 公里的长跑计划。这是一次试图探索自己极限的尝试。</p><p>这之前以及这之后的半个多月，每天还是悠然自得地学上 6 - 7 个小时，然后跑步，或者摸鱼。这期间我每天还能有精力构思考研百日倒计时的创意形式，每日更新，画在在寝室里的白板上。</p><p>还剩 40 多天的时候，开始感到时间不够用了，专业课只过了一遍，个别章节甚至完全没有看；线代才做一半，概率论还没开始看，真题也还没开始做。政治才做过一遍 1000 题，大题没怎么看。</p><p>还剩一个月的时候，这辈子考试都没慌过的我终于开始慌了。我知道自己无论如何也没有时间做第二遍了。</p><p>还有三周的时候，大脑一片空白，似乎复习过的痕迹丝毫没有留下记忆，打算放弃的想法划过脑海。</p><p>经过一番思索后，还是决定挣扎一下。</p><p>极端紧迫的时间条件和糟糕的复习状况，成为了一个触发条件，像是正好打破了那道壁垒，进入了 zoom 状态，作为一名自我诊断为 ADD 的人士，我第一次体验到什么叫真正的专注。</p><h3 id="最后当然是毫无悬念地失败了"><a href="#最后当然是毫无悬念地失败了" class="headerlink" title="最后当然是毫无悬念地失败了"></a>最后当然是毫无悬念地失败了</h3><p>数学一全书完整的一遍都没做完，最后遇上数一这一年爆冷近几年最难，我把能写上的都写上了。<br>目标：随缘<br>结果：数学一 90 / 150 分。</p><p>政治大题花了四个晚上一个下午背的肖四，用理解记忆 或者 拆字记忆法 40 个字记忆几百字答案，大概背了七八题。考试时，答案都出现在题干的情况下，3 小时没停笔。<br>目标：65<br>结果：政治 70 / 100 分。</p><p>英语真题阅读做了两遍，核心单词背了忘，忘了还忘。考试做阅读时差点睡着。作文背了模板，结果在考场上放飞了自我开始随心所欲自由发挥。<br>目标：70<br>结果：英语一 68 / 100 分。</p><p>专业课，数据结构算法完全没有复习，组成原理两个大章节没有复习，王道只做过一遍。考试 15 分的算法题扣光。<br>目标：随缘<br>结果：408专业课 106 / 150 分。</p><p>总分：334<br>复试线：361<br>该专业报名人数：约2000</p><p>最后当然是毫无悬念地失败了。自我分析一下原因。<br>客观原因：</p><ul><li>浙大计算机报名人数爆炸<ul><li>前年报名人数 1200+，复试线 330+；去年报名人数2000，复试线361，总体试卷难度高于上一年。</li></ul></li><li>零基础跨专业跨学校跨地区<ul><li>俗称难度最大的三跨考生</li></ul></li></ul><p>主观原因：</p><ul><li>我菜</li><li>我懒</li><li>我每天只看不到 7 小时的书</li><li>我只复习了一遍还没看完</li></ul><p>事无巨细地述说去年考试的细节，除了单纯回顾一下我还想说什么：</p><ul><li>研究生并不难考<ul><li>我如此糟糕的复习状况，最后结果也没有太难看，说明研究生考试难度并不是很大。只要不是跨专业不考TOP2，其他学校基本是很容易上的，身边有不少案例。</li><li>跨考的只要不是考热门专业，没有上千的报名人数，基本上也是很好考的。（一般专业有超过 500 人报考就很多的了）</li><li>跨考的又是考热门专业，只要你比我再上点心，别天天摸鱼，我想问题也不会很大。</li></ul></li></ul><h3 id="决定二战"><a href="#决定二战" class="headerlink" title="决定二战"></a>决定二战</h3><p>毕竟是跨考，毕竟是零基础学计算机的四大专业课，毕竟整个复习过程太悠闲，所以再给点时间，二战一定没有问题的吧，我这样告诉自己。</p><p>正式复习依然是 7 月份开始。依然是悠闲的复习，但这次是脚踏实地的悠闲复习。<br>此处省略 x 字。</p><h3 id="突然得知已经错过了正式报名"><a href="#突然得知已经错过了正式报名" class="headerlink" title="突然得知已经错过了正式报名"></a>突然得知已经错过了正式报名</h3><p>第一反应是惊讶。我也不知道为什么，今年没有像去年那样设置日历事件提醒。总之在几分钟后接受了没办法挽回的事实后，一边和朋友报告这个消息，一边重新思考自己到底为什么要考研。</p><p>主要是两大原因，如今分别对其进行反驳：</p><blockquote><p>1.方便转行<br>读研可以让我快速进入一个全新的领域。</p></blockquote><p><strong>反驳：</strong></p><ul><li><strong>计算机互联网行业转行太容易了</strong><ul><li>有人上了几个月培训班就能去写代码了；有人读完硕博想转行计算机，就自学几个月相关领域知识代码技能，去谷歌上班了</li><li>如果只是单纯为了转行，没有必要花费三年时间去读研</li></ul></li></ul><blockquote><p>2.提升学历<br>拥有一个 985 的硕士文凭总是好的，也能证明实力。</p></blockquote><p><strong>反驳：</strong></p><ul><li><strong>我并没有很强烈的名校情结</strong><ul><li>我不崇拜权威。在国内的应试教育的环境之下，很多人对学霸有着天然的好感，自然而然地有一种崇敬之情。但我觉得这是狼奶，得吐，说白了这还是潜意识里一种对于权威的崇拜。</li><li>那为什么非得是浙大？因为浙大计算机是国内顶尖的，同时浙大复试是出了名的公平公开，而且校风学风自由开放。</li><li>其他人我无所谓，最想向父母证明自己的实力，想告诉他们我并不比别人差。但证明实力并不是只有这一种方式。</li></ul></li><li><strong>我不一定喜欢做计算机相关的研究</strong><ul><li>计算机领域的研究无非是阅读最新论文、相关书籍，听讲座，做实验（电脑上），写论文。</li><li>但是我喜欢计算机的一点是，它是一种万能的工具，一种你可以操作的工具。你可以切实可行地用它来做一点什么事情，即便只是很微小的一个部分，但可以改变你自己的或者别人的生活。</li></ul></li><li><strong>考上了也不能自由选择研究方向</strong><ul><li>研究方向还需要经过实验室面试才能确定，热门实验室热门导师总是很抢手，很有可能最后去的实验室并不是自己感兴趣的领域。</li></ul></li><li><strong>不当研究生也没有人拦着你关注行业最新领域</strong><ul><li>计算机不像其他学科需要购置很多庞大的专业的实验器材，也没有严苛的实验条件，只要你有一台能上网的电脑，就能做很多事情。</li><li>网络上没有行业的资源能超越计算机的，铺天盖地的学习资料，开放的制作精良的网络课程，无数优秀的开源项目的源代码。最新研究论文随便阅读，你一样可以在自己电脑上重新实现论文中的想法，并运用到自己的工作当中。</li></ul></li><li><strong>一张硕士文凭和三年工作经验孰轻孰重</strong><ul><li>计算机行业知识和技术日新月异，研究生学的东西在工作中基本用不到，一切依然是从头开始</li><li>研究生文凭 + 无工作经验 vs 本科文凭 + 三年工作经验，实际上后者在薪资上更有竞争力</li></ul></li><li><strong>研究生是一个新的框</strong><ul><li>研究生有论文压力，同样有 Deadline，一样是被推着往前走</li><li>研究生导师一般都被称为“老板”，和工作一样，实际上也是替你的“老板”打工</li><li>刚刚从大学这个牢笼逃离出来，为什么要这么快进入一个新的框呢</li><li>什么时候读研都不会太迟</li></ul></li></ul><p>想通之后，一阵轻松。</p><p>当晚一夜无眠。想到可以继续看 kindle 中堆积了几个月的书，可以好好折腾自己的博客，可以去摄影，可以将最近的项目灵感付诸实践，可以把过去收藏了好久的计算机相关的博客文章拿出来好好研究，内心的喜悦随之一点点绽放开来。</p><p>嗯，是自由的味道，真正意义上的自由。</p><h3 id="自由与快乐"><a href="#自由与快乐" class="headerlink" title="自由与快乐"></a>自由与快乐</h3><p>我所追求的事物总结起来其实只有两点：1.自由，2.快乐。并且将这两点作为我是否要做某件事的衡量标准。</p><p>当初学物理，因为觉得物理能够让我更好地理解自己所生活的世界，了解世间万物为何如此运作。物理，因而名为“万物之理”。这是思想上的自由。</p><p>现在学计算机，因为觉得计算机是一种万能的工具，可以和任意领域结合，并且可以用来做出一些真正的、有用的“东西”，是能够做出可以让自己和他人感到便利，真切改善生活品质的工具。互联网是世界之窗，能够看到更大的世界。这是“行动”上的自由。当然了，计算机在某种程度上还能带来经济上的自由。</p><p>自由和快乐是相辅相成、相生相灭的。对我而言，失去自由的快乐不叫快乐，而失去快乐的自由是根本不存在的。</p><p>说来也奇怪，曾经好几次都是这样，虽然平日里也常常与阴郁和黑暗为伴，但在人生关键节点，脑海中描绘的未来永远是光明灿烂的。大概我真的自带“乐观的基因”吧。</p><p>觉得遗憾吗？有一点吧，毕竟现在总体第一轮复习差不多结束，数学一轮半并且真题已经能稳定在 130+ ；一年没碰政治，刚开始写 1000 题，选择题平均 100 个错 30 个，错的那些主要是完全需要死记硬背的没有任何逻辑性可言的生搬硬套部分；8 月份刷完了 PAT 算法题库；此时距离考试还有 50 天。</p><p>这些时间都浪费了吗？并没有，因为我很反感耗费时间在学习（自认为）毫无用处的事物上。我实际花费时间精力复习的部分或多或少都将在未来的学习工作中使用到：高数、线代、概率论都是数据科学和机器学习的理论基础，刷的算法题是工作日常要用的，四大专业课学完了这部分基础也达到了计算机专业本科生的水平，其他实在没用的东西比如政治根本没开始看。而且期间我利用闲暇时间做兼职，还挣了九千买了个相机，不亏。</p><p>当然你也可以认为，以上都是我失败的自我安慰。那又如何呢，你怎么想跟我有什么关系呢，我照样过得很好。</p><p>刚刚看到<a href="https://www.jiqizhixin.com/articles/2018-10-11-4" target="_blank" rel="noopener">一篇文章</a>，文末有这样一句话感觉说得很好：</p><blockquote><p>对自己好一点。你没有在 18 岁毕业又不会死，没有在二十几岁获得博士学位又怎么了，没有在多少岁成为百万富翁又会怎样。去发现这个世界，去了解自己，去享受生命的过程。</p></blockquote><p>你根本不知道明天会发生什么，我也想象不到有一天我会错过一个大型考试。</p><p>这一天，我看了一篇关于自然语言处理的综述，看教程学习爬虫爬了百科词条，翻出博客重新写博文，总之打开电脑就不想玩手机了。</p><p>原来总觉得人生苦短，但此时此刻，第一次觉得人生很长，我才 22 周岁，依然有大好时光。</p><blockquote><p>塞翁失马，焉知非福。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;预想过失败的很多种方式，但没想到的是，有一天我会栽到这里。&lt;br&gt;
    
    </summary>
    
      <category term="日常闲聊" scheme="http://lulalap.com/categories/%E6%97%A5%E5%B8%B8%E9%97%B2%E8%81%8A/"/>
    
    
      <category term="闲聊" scheme="http://lulalap.com/tags/%E9%97%B2%E8%81%8A/"/>
    
  </entry>
  
  <entry>
    <title>Atom下如何让光标自动移动到配对符号外</title>
    <link href="http://lulalap.com/2018/03/12/Automatically-Move-the-cursor-outside-the-brackets-in-Atom/"/>
    <id>http://lulalap.com/2018/03/12/Automatically-Move-the-cursor-outside-the-brackets-in-Atom/</id>
    <published>2018-03-12T14:28:32.000Z</published>
    <updated>2018-11-04T12:04:52.023Z</updated>
    
    <content type="html"><![CDATA[<p>Atom作为一款简洁优美的编辑器深受广大用户的喜爱，丰富的插件极大地提高了它的易用性。日常敲代码的人都知道，编辑器提供的符号自动配对（即括号成对输出：“”）虽然降低了出错率，但是最令人头疼的还是在输入完成后，需要再敲一个方向键才能将光标移动到括号外，而单纯移动手指是够不着方向键→的。</p><p>那么如何在Atom环境下解决光标自动移动问题？</p><a id="more"></a><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>Windows 10 + 64位</li><li>Atom</li></ul><h3 id="修改init-script文件"><a href="#修改init-script文件" class="headerlink" title="修改init script文件"></a>修改init script文件</h3><ul><li><p>在 Atom 编辑器中，用 Ctrl + Shift + P 呼出 Command Palette 窗口</p></li><li><p>在窗口搜索框输入 init script , 点击 Application: Open Your Init Script</p></li><li><p>在打开的文件里粘贴以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># move cursor across the ending symbols...</span></span><br><span class="line">EndingSymbolRegex = /\s*[)&#125;&gt;\]/<span class="string">'"`;:=-]/</span></span><br><span class="line"><span class="string">atom.commands.add '</span>atom-text-editor<span class="string">', '</span>custom:jump-over-symbol<span class="string">': (event) -&gt;</span></span><br><span class="line"><span class="string">  editor = atom.workspace.getActiveTextEditor()</span></span><br><span class="line"><span class="string">  cursorMoved = false</span></span><br><span class="line"><span class="string">  for cursor in editor.getCursors()</span></span><br><span class="line"><span class="string">    range = cursor.getCurrentWordBufferRange(wordRegex: EndingSymbolRegex)</span></span><br><span class="line"><span class="string">    unless range.isEmpty()</span></span><br><span class="line"><span class="string">      cursor.setBufferPosition(range.end)</span></span><br><span class="line"><span class="string">      cursorMoved = true</span></span><br><span class="line"><span class="string">  event.abortKeyBinding() unless cursorMoved</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="修改快捷键键位"><a href="#修改快捷键键位" class="headerlink" title="修改快捷键键位"></a>修改快捷键键位</h3><ul><li>在 Atom 编辑器中，用 Ctrl + Shift + P 呼出 Command Palette 窗口</li><li>在窗口搜索框输入 keymap , 点击 Application: Open Your keymap</li><li><p>在打开的文件底部增加如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"atom-text-editor:not([mini])"</span>:</span><br><span class="line">  <span class="string">"tab"</span>: <span class="string">"custom:jump-over-symbol"</span></span><br></pre></td></tr></table></figure></li><li><p>“tab” 可更换成自己习惯的其他快捷键，如”shift”, “enter”, 或者”shift-enter”</p></li></ul><h3 id="更新设置"><a href="#更新设置" class="headerlink" title="更新设置"></a>更新设置</h3><ul><li>在 Atom 编辑器中，用 Ctrl + Shift + P 呼出 Command Palette 窗口</li><li>输入 reload, 选择 Window: Reload</li></ul><p>接下来就可以愉快地玩耍啦！</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://jetorz.github.io/2017-02-07-Skill-Atom-auto-pair.html" target="_blank" rel="noopener">技巧卡：怎样让 Atom 将光标自动移动到配对符号外</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Atom作为一款简洁优美的编辑器深受广大用户的喜爱，丰富的插件极大地提高了它的易用性。日常敲代码的人都知道，编辑器提供的符号自动配对（即括号成对输出：“”）虽然降低了出错率，但是最令人头疼的还是在输入完成后，需要再敲一个方向键才能将光标移动到括号外，而单纯移动手指是够不着方向键→的。&lt;/p&gt;
&lt;p&gt;那么如何在Atom环境下解决光标自动移动问题？&lt;/p&gt;
    
    </summary>
    
      <category term="日常折腾" scheme="http://lulalap.com/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="Atom" scheme="http://lulalap.com/tags/Atom/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建博客简明教程</title>
    <link href="http://lulalap.com/2018/01/21/Building-A-Blog-From-Scratch/"/>
    <id>http://lulalap.com/2018/01/21/Building-A-Blog-From-Scratch/</id>
    <published>2018-01-21T12:57:57.000Z</published>
    <updated>2018-11-06T14:30:12.355Z</updated>
    
    <content type="html"><![CDATA[<p>你是不是早就厌倦了那些博客网站毫无美感的界面，是不是受够了无休无止的网站推送，是不是早就想建立一个属于自己的博客，却止步于复杂的教程以及一系列令人头疼的代码？那么恭喜你，这篇文章就是想以最浅显易懂的方式手把手教你搭建属于自己的博客，你只需要一点耐心，一步步跟着做。<br><a id="more"></a></p><p>Hexo 作为一个快速、简洁且高效的博客框架，简直是小白们的福音，而 GitHub 又免去了我们额外租用并部署服务器的麻烦。因此本文将利用 Hexo 及 GitHub 搭建博客。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>下载安装 node.js （<a href="https://nodejs.org/en/" target="_blank" rel="noopener">官网下载安装</a>）</li><li>下载安装 git （<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">官网下载安装</a>）</li></ul><h3 id="本地搭建hexo静态博客"><a href="#本地搭建hexo静态博客" class="headerlink" title="本地搭建hexo静态博客"></a>本地搭建hexo静态博客</h3><ul><li><p>安装hexo框架: 打开cmd 运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>新建一个文件夹，如 MyBlog ，进入该文件夹内，右击运行 git ，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></li><li><p>生成完 hexo 模板，安装 npm ，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure></li></ul><p>没错，博客的主体部分到此已经完成了，来看看效果吧。运行：<br>     <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></p><p>这时候打开浏览器，输入 localhost:4000 就可以看到博客目前的样子了。小小激动一下，然后按 Ctrl + C 就可以继续下面的操作了。</p><h3 id="个性化设置（初步）"><a href="#个性化设置（初步）" class="headerlink" title="个性化设置（初步）"></a>个性化设置（初步）</h3><h4 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h4><ul><li>下载新的主题（以<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT 主题</a>为例），在根目录下运行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>打开根目录下的 _config.yml ，修改字段 theme 为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></li><li><p>选择外观：打开 /themes/next 目录下的主题配置文件 <em>config.yml ， 找到 scheme 字段（可用 Ctrl + F 快捷查找）。NexT提供了三种不同的外观，可以挑选一个自己喜欢的，然后去掉其中一个的 # 号(后续主要修改的也就是这两个文件： </em>站点配置文件<em> 和 </em>主题配置文件_ 。)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line">scheme: Mist</span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure></li><li><p>查看效果，可运行如下命令(以后每次想查看效果都可重复此步骤)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></li></ul><h4 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h4><ul><li>使用编辑器打开根目录下的站点配置文件 _config.yml （Windows下不要使用记事本编辑，中文标题会出现乱码），修改字段 Site ， 注意冒号后面要有空格：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line">title: 未知的世界                //博客名称</span><br><span class="line">subtitle:</span><br><span class="line">description:  Do something cool //一句签名</span><br><span class="line">author: LulalaP                 //作者</span><br><span class="line">language: zh-Hans               //网站语言</span><br><span class="line">timezone:</span><br></pre></td></tr></table></figure></li></ul><h3 id="设置侧边栏头像"><a href="#设置侧边栏头像" class="headerlink" title="设置侧边栏头像"></a>设置侧边栏头像</h3><ul><li><p>在 /source 中新建文件夹并命名为 uploads , 将头像图片（如： avatar.jpg ）放到该文件夹内</p></li><li><p>打开 /themes/next 目录下的主题配置文件 _config.yml ，找到字段 avatar 并修改为:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avatar: /uploads/avatar.jpg</span><br></pre></td></tr></table></figure></li></ul><h3 id="完善博客页面"><a href="#完善博客页面" class="headerlink" title="完善博客页面"></a>完善博客页面</h3><h4 id="添加菜单"><a href="#添加菜单" class="headerlink" title="添加菜单"></a>添加菜单</h4><ul><li>在主题配置文件 _configy.yml 设置中将字段 menu 中需要添加的菜单前面的注释去掉即可。如需要添加其他菜单可按需添加（注意字段的缩进）：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  categories: /categories</span><br><span class="line">  archives: /archives</span><br><span class="line">  tags: /tags</span><br><span class="line">  about: /about</span><br></pre></td></tr></table></figure></li></ul><h4 id="创建分类页面"><a href="#创建分类页面" class="headerlink" title="创建分类页面"></a>创建分类页面</h4><ul><li><p>新建一个页面，命名为 categories ，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure></li><li><p>编辑刚新建的页面 /source/categories/index.md ，将页面的类型设置为 categories ，主题将自动为这个页面显示所有分类（注意保留冒号后的空格）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: 分类</span><br><span class="line">date: 2018-01-23 13:37:11</span><br><span class="line"><span class="built_in">type</span>: <span class="string">"categories"</span></span><br><span class="line">comments: <span class="literal">false</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ul><h4 id="创建标签云界面"><a href="#创建标签云界面" class="headerlink" title="创建标签云界面"></a>创建标签云界面</h4><ul><li><p>新建一个页面，命名为 tags ，命令如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page <span class="string">"tags"</span></span><br></pre></td></tr></table></figure></li><li><p>编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: 所有标签</span><br><span class="line">date: 2018-01-22 14:09:12</span><br><span class="line"><span class="built_in">type</span>: <span class="string">"tags"</span></span><br><span class="line">comments: <span class="literal">false</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ul><h4 id="创建”关于我”页面"><a href="#创建”关于我”页面" class="headerlink" title="创建”关于我”页面"></a>创建”关于我”页面</h4><ul><li><p>新建一个 about 页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">"about"</span></span><br></pre></td></tr></table></figure></li><li><p>编辑刚新建的页面，可在正文处用Markdown格式写下信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 关于</span><br><span class="line">date: 2018-01-22 14:09:12</span><br><span class="line">comments: <span class="literal">false</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ul><h3 id="设置侧边栏社交链接"><a href="#设置侧边栏社交链接" class="headerlink" title="设置侧边栏社交链接"></a>设置侧边栏社交链接</h3><ul><li><p>编辑站点的 _config.yml，新增字段 social，然后添加社交站点名称与地址即可。键值格式为 显示名称：链接地址 ，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Social links</span></span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/your-user-name</span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/your-user-name</span></span><br><span class="line">  微博: http://weibo.com/your-user-name</span><br><span class="line">  <span class="comment">#douban: http://douban.com/people/your-user-name</span></span><br><span class="line">  <span class="comment">#知乎: http://www.zhihu.com/people/your-user-name</span></span><br><span class="line">  <span class="comment"># 等等</span></span><br></pre></td></tr></table></figure></li><li><p>编辑主题的 _config.yml, 在social_icons字段下添加社交站点名称（注意大小写）与(图标)[<a href="http://fontawesome.io/icons/]。" target="_blank" rel="noopener">http://fontawesome.io/icons/]。</a> enable 选项用于控制是否显示图标，你可以设置成 false 来去掉图标。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">social_icons:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Icon Mappings.</span></span><br><span class="line">  <span class="comment"># KeyMapsToSocalItemKey: NameOfTheIconFromFontAwesome</span></span><br><span class="line">  GitHub: github</span><br><span class="line">  Twitter: twitter</span><br><span class="line">  Weibo: weibo</span><br><span class="line">  Linkedin: linkedin</span><br></pre></td></tr></table></figure></li></ul><h3 id="将博客与GitHub关联"><a href="#将博客与GitHub关联" class="headerlink" title="将博客与GitHub关联"></a>将博客与GitHub关联</h3><ul><li><p>注册GitHub账号：如果还没有GitHub账号的，需要先注册一个</p></li><li><p>在Github上创建名字为XXX.github.io的项目，XXX为自己的github用户名。</p></li><li><p>打开本地的MyBlog文件夹项目内的_config.yml配置文件，将其中的type设置为git:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/your-name/your-name.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li><li><p>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>本地生成静态文件，并将静态文件推送至GitHub，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>此时，打开浏览器，访问 <a href="http://your-name.github.io" target="_blank" rel="noopener">http://your-name.github.io</a> ，恭喜你，到此为止你的博客已经建设完毕了。</p></li></ul><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>到目前为止博客已经全部搭建完成，也能通过 GitHub 的域名访问，这时候再用一个短域名绑定到这个博客上就更完美了。</p><h4 id="域名购买"><a href="#域名购买" class="headerlink" title="域名购买"></a>域名购买</h4><ul><li>购买一个域名（待补充）</li></ul><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><ul><li><p>域名提供商设置</p></li><li><p>添加2条A记录：</p><blockquote><p>@—&gt;192.30.252.154<br>@—&gt;192.30.252.153</p></blockquote></li><li><p>添加一条CNAME记录：</p><blockquote><p>CNAME—&gt;lulalap.github.io</p></blockquote></li><li><p>博客目录添加 CNAME 文件</p><p>配置完域名解析后，进入博客目录，在source目录下新建一个命名为 CNAME 的文件(注意要大写，没有后缀)，用记事本打开编辑，写入购买好的域名，如：www.lulalap.com</p></li><li><p>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ul><p>现在打开浏览器，输入域名，回车，恭喜你已经拥有了一个属于自己独立域名的博客。</p><h3 id="发布新文章"><a href="#发布新文章" class="headerlink" title="发布新文章"></a>发布新文章</h3><ul><li><p>在博客根目录下执行：hexo new “我的第一篇文章”，会在 source/_posts 文件夹内生成一个.md文件。</p></li><li><p>编辑该文件，修改起始字段为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title 文章的标题</span><br><span class="line">date 创建日期 （文件的创建日期 ）</span><br><span class="line">updated 修改日期 （ 文件的修改日期）</span><br><span class="line">comments 是否开启评论 <span class="literal">true</span></span><br><span class="line">tags 标签</span><br><span class="line">categories 分类</span><br><span class="line">permalink url中的名字（文件名）</span><br></pre></td></tr></table></figure></li><li><p>编写正文内容(遵循 Markdown 规则)</p></li><li><p>本地生成静态文件，并将静态文件推送至GitHub，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ul><h3 id="个性化设置（进阶）"><a href="#个性化设置（进阶）" class="headerlink" title="个性化设置（进阶）"></a>个性化设置（进阶）</h3><h3 id="添加-RSS"><a href="#添加-RSS" class="headerlink" title="添加 RSS"></a>添加 RSS</h3><ul><li><p>在根目录下安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></li><li><p>在主题文件的 <em>config.yml 里面的末尾添加：(**</em>请注意在冒号后面要加一个空格，不然会发生错误！_**)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line">plugins: hexo-generate-feed</span><br></pre></td></tr></table></figure></li><li><p>打开 next 主题文件夹里面的 _config.yml ,在在 rss: 的后面加上 /atom.xml (注意在冒号后面要加一个空格)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure></li></ul><h3 id="首页文章截断"><a href="#首页文章截断" class="headerlink" title="首页文章截断"></a>首页文章截断</h3><ul><li><p>每次写文章正文时，只需要在文章 .md 中需要截断的地方增加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure></li><li><p>将主题目录下配置文件里的 scroll_to_more 这个选项设置为 false 。</p></li></ul><h4 id="设定站点建立时间"><a href="#设定站点建立时间" class="headerlink" title="设定站点建立时间"></a>设定站点建立时间</h4><ul><li><p>编辑站点的 _config.yml ，新增字段 since 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">since: 2013</span><br></pre></td></tr></table></figure></li></ul><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://neveryu.github.io/2016/09/30/hexo-next-two/" target="_blank" rel="noopener">Hexo-NexT搭建个人博客（二）</a><br><a href="https://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="noopener">hexo的next主题个性化教程:打造炫酷网站</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你是不是早就厌倦了那些博客网站毫无美感的界面，是不是受够了无休无止的网站推送，是不是早就想建立一个属于自己的博客，却止步于复杂的教程以及一系列令人头疼的代码？那么恭喜你，这篇文章就是想以最浅显易懂的方式手把手教你搭建属于自己的博客，你只需要一点耐心，一步步跟着做。&lt;br&gt;
    
    </summary>
    
      <category term="日常折腾" scheme="http://lulalap.com/categories/%E6%97%A5%E5%B8%B8%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="博客搭建" scheme="http://lulalap.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
